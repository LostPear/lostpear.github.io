<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>欢迎！</title>
      <link href="/2024/12/18/Hello/"/>
      <url>/2024/12/18/Hello/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客！希望你能在这里度过一段充实的时光。</p><p><img src="https://images.shojola.top/Cache_65ca19aa7bbef8e1_45af6b16f094e178a08b836c85d80104.jpg" alt="这是一张测试图片~"></p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 学习笔记</title>
      <link href="/2024/11/12/CentOS7_Tutorial/"/>
      <url>/2024/11/12/CentOS7_Tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础指令"><a href="#一、基础指令" class="headerlink" title="一、基础指令"></a>一、基础指令</h1><h2 id="1-1-Linux-的文件目录结构"><a href="#1-1-Linux-的文件目录结构" class="headerlink" title="1.1 Linux 的文件目录结构"></a>1.1 Linux 的文件目录结构</h2><p>Linux 系统与 Windows 系统管理磁盘的方式不同，Linux 系统把整个磁盘作为根目录，下面存放着不同的文件夹，称为挂载点。一些挂载点的作用如下：</p><p><code>/etc</code>：存放程序的配置文件，也存放着环境变量的配置；</p><p><code>/home</code>：用户目录，存放用户文件；</p><p><code>/usr</code>：系统级的目录，相当于 Windows 系统下的<code>C:\Windows</code>；</p><p><code>/opt</code>：用户级的目录，存放着用户自己安装的程序。</p><h2 id="1-2-基础命令"><a href="#1-2-基础命令" class="headerlink" title="1.2 基础命令"></a>1.2 基础命令</h2><p><code>cd</code>：定位到所处的目录.</p><p>用法：<code>cd [参数] [目录]</code>。不指定目录时，默认定位到用户目录<code>/home/user1/</code>，<code>user1</code>是当前用户的用户名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost /]$ <span class="built_in">cd</span> /home</span><br><span class="line">[rinko24@localhost home]$</span><br></pre></td></tr></table></figure><hr><p><code>pwd</code>：显示当前所在的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">pwd</span></span><br><span class="line">/home/rinko24</span><br></pre></td></tr></table></figure><hr><p><code>ls</code>：列出当前所处目录下的所有子目录。</p><p>用法：<code>ls [参数]</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">ls</span></span><br><span class="line">公共  模板  视频  图片  文档  下载  音乐  桌面</span><br></pre></td></tr></table></figure><p>可使用的部分参数如下：</p><p><code>-a</code>：显示所有的子文件和子文件夹，包括隐藏文件。</p><p><code>-l</code>：显示目录下所有文件和文件夹的详细信息。</p><p><code>-h</code>：将文件信息使用更容易阅读的方式显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost /]$ <span class="built_in">ls</span> -lha</span><br><span class="line">总用量 24K</span><br><span class="line">lrwxrwxrwx.   1 root root    7 11月 11 23:12 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.   5 root root 4.0K 11月 11 23:38 boot</span><br><span class="line">drwxr-xr-x.  20 root root 3.3K 11月 12 14:32 dev</span><br><span class="line"><span class="comment"># 部分输出内容省略</span></span><br><span class="line"><span class="comment"># 显示该目录下所有文件夹和文件的详细信息，并用容易阅读的方式显示</span></span><br></pre></td></tr></table></figure><hr><p><code>clear</code>：清空屏幕。</p><hr><p><code>exit</code>：退出终端。使用<code>Ctrl</code>+<code>L</code>可以实现同样效果。</p><h2 id="1-3-目录基本操作"><a href="#1-3-目录基本操作" class="headerlink" title="1.3 目录基本操作"></a>1.3 目录基本操作</h2><p><code>mkdir</code>：创造文件夹。</p><p>用法：<code>mkdir [参数] [目录]</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">mkdir</span> test1</span><br><span class="line"><span class="comment"># 创建文件夹test1</span></span><br></pre></td></tr></table></figure><p>可使用的参数如下：</p><p><code>-m</code>：配置文件权限。</p><p><code>-p</code>：创建递归文件目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">mkdir</span> -m 755 -p test1/test2</span><br><span class="line"><span class="comment"># 在test1下创建名为test2的文件夹，权限为755</span></span><br></pre></td></tr></table></figure><blockquote><p>Linux下的权限格式如下：</p><p>rwx | rwx | rwx，r表示可读，w表示可写，x表示可执行。如果某个权限不可用，则用单斜杠替代对应位置。三个组分别代表 root 用户，root 组用户，用户组的权限。</p><p>对于<code>-m</code>指令，权限使用数字表示，每一组中 r，w，x 值分别对应的值为4，2，1，每组加和之后并列表示。比如 755 表示的权限就是rwxr-xr-x。</p></blockquote><hr><p><code>rmdir</code>：删除文件夹。</p><p>用法：<code>rmdir [参数] [目录]</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">rmdir</span> test1</span><br><span class="line"><span class="comment"># test1文件夹被删除</span></span><br></pre></td></tr></table></figure><p>可使用的参数如下：</p><p><code>-p</code>：递归删除目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">rmdir</span> -p test1/test2</span><br><span class="line"><span class="comment"># test1文件夹以及test1下的test2文件夹均被删除</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-4-文件操作指令"><a href="#1-4-文件操作指令" class="headerlink" title="1.4 文件操作指令"></a>1.4 文件操作指令</h2><p><code>touch</code>：创建文件。</p><p>用法：<code>touch [参数] [文件名称]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">touch</span> test.txt</span><br><span class="line"><span class="comment"># 创建名为test.txt的文件</span></span><br></pre></td></tr></table></figure><hr><p><code>rm</code>：删除文件。默认情况下<code>rm</code>不操作文件夹。</p><p>用法：<code>rm [参数] [文件名称]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">rm</span> test.txt</span><br><span class="line"><span class="comment"># 删除test.txt</span></span><br></pre></td></tr></table></figure><p>可使用的参数如下：</p><p><code>-r</code>：把指定的文件目录和其以下的文件全部删除。</p><p><code>-f</code>：强制删除文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">rm</span> -rf test1</span><br><span class="line"><span class="comment"># 强制删除文件夹test1和里面的所有文件</span></span><br></pre></td></tr></table></figure><hr><p><code>cp</code>：文件复制。默认情况下<code>cp</code>不操作文件夹。</p><p>用法：<code>cp [参数] [源文件路径] [目标目录]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">cp</span> test1.txt ./test1</span><br><span class="line"><span class="comment"># 把当前目录下的test1.txt复制到test1文件夹里</span></span><br></pre></td></tr></table></figure><p>可用的参数如下：</p><p><code>-R</code>：允许复制文件夹及其下属文件。</p><hr><p><code>mv</code>：文件移动。</p><p>用法：<code>mv [参数] [源文件路径] [目标目录]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">cp</span> test1.txt ./test1</span><br><span class="line"><span class="comment"># 把当前目录下的test1.txt复制到test1文件夹里</span></span><br><span class="line">[rinko24@localhost ~]$ <span class="built_in">cp</span> test1.txt test2.txt</span><br><span class="line"><span class="comment"># 把当前目录下的test1.txt重命名为test2.txt</span></span><br></pre></td></tr></table></figure><p>可用的参数如下：</p><p><code>-f</code>：不询问而强制覆盖文件，不论目标路径中是否有同名文件</p><hr><h2 id="1-5-文件查找命令"><a href="#1-5-文件查找命令" class="headerlink" title="1.5 文件查找命令"></a>1.5 文件查找命令</h2><p><code>find</code>：查找文件。</p><p>用法：<code>find [参数] [要查找的路径] [查找条件] [查找后要执行的操作]</code></p><p>可以使用的查找条件如下：<code>-size + 大小</code>：指定查找的最小的文件大小。</p><p><code>-name</code>：要查找的文件名。</p><p>可以使用的参数如下：</p><p><code>-r</code>：递归查找。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ find /home -name test1.txt</span><br><span class="line"><span class="comment"># 在/home目录下查找名字为test1.txt的文件</span></span><br></pre></td></tr></table></figure><hr><p><code>which</code>：查找软件包安装的位置。</p><p>用法：<code>which [软件包名]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ <span class="built_in">which</span> <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 查找软件包ls所在的位置</span></span><br></pre></td></tr></table></figure><hr><p><code>locate</code>：快速查找命令。<code>locate</code>从一个数据库中查找文件，而<code>find</code>是根据到实际的目录中查找。</p><p>用法：<code>locate [参数] [文件名]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ locate test1.txt</span><br><span class="line"><span class="comment"># 快速查找test1.txt</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-6-文件查看命令"><a href="#1-6-文件查看命令" class="headerlink" title="1.6 文件查看命令"></a>1.6 文件查看命令</h2><p><code>cat</code>：获取文件内容。</p><p><code>less</code>：分页查看。</p><p><code>head</code>：查看文件头部。</p><p><code>tail</code>：查看文件尾部。</p><p>以上命令的使用格式均为<code>命令 [参数] [要查看的文件的名字]</code>。</p><h2 id="1-7-获取帮助命令"><a href="#1-7-获取帮助命令" class="headerlink" title="1.7 获取帮助命令"></a>1.7 获取帮助命令</h2><p><code>info</code>：查看文档信息的工具</p><p><code>man</code>：查看各种命令，函数和系统调用的手册页</p><p><code>help</code>：显示内置命令的帮助信息。作为参数使用时，可以显示当前命令的帮助信息。</p><h2 id="1-8-压缩解压命令"><a href="#1-8-压缩解压命令" class="headerlink" title="1.8 压缩解压命令"></a>1.8 压缩解压命令</h2><p><code>tar</code>：打包文件用。</p><p>使用方法：<code>tar [参数] -f 打包文件的名称 [要打包的文件和目录]</code></p><p>可使用的参数如下：</p><p><code>-c</code>：创建新的存档文件。</p><p><code>-x</code>：解压存档文件。</p><p><code>-f</code>：指定要操作的存档文件的名称。</p><p><code>-t</code>：列出归档文件的内容。</p><p><code>-r</code>：向现有归档文件中追加文件。</p><p><code>-u</code>：仅追加比归档文件中已有文件更新的文件。</p><p><code>-d</code>：找到归档文件中与文件系统不同步的差异。</p><p><code>-A</code>：将一个 <code>.tar</code>文件追加到另一个<code>.tar</code> 文件中。</p><p><code>-v</code>：显示详细操作过程。</p><hr><p><code>zip</code>：压缩文件。</p><p>用法：<code>zip [参数] 生成压缩文件的文件名 要压缩的文件或目录</code></p><p>可使用的参数如下：</p><p><code>-r</code>：递归压缩目录及其子目录中的所有文件。</p><p><code>-e</code>：为压缩文件设置密码保护。</p><p><code>-q</code>：静默模式，不显示压缩过程。</p><p><code>-v</code>：显示详细的压缩过程。</p><p><code>-x</code>：排除某些文件或目录，不进行压缩。</p><p><code>-m</code>：压缩后删除原始文件。</p><p><code>-0</code> 到 <code>-9</code>：指定压缩级别，<code>-0</code> 表示存储不压缩，<code>-9</code> 表示最高压缩率，默认是 <code>-6</code>。</p><p><code>gzip</code>也可用来压缩文件，生成的压缩包后缀为<code>.gz</code>。</p><hr><p><code>unzip</code>：解压压缩包。</p><p>用法：<code>unzip [参数] 要解压的压缩包</code></p><p>可以使用的参数如下：</p><p><code>-l</code>：查看压缩包内的文件。</p><p><code>-t</code>：验证完整性。</p><p><code>-d</code>：指定要解压到的文件夹。</p><p>类似地，解压<code>.gz</code>文件也可以使用<code>gunzip</code>命令。</p><h1 id="二、文档编辑指令"><a href="#二、文档编辑指令" class="headerlink" title="二、文档编辑指令"></a>二、文档编辑指令</h1><h2 id="2-1-vi-vim-命令"><a href="#2-1-vi-vim-命令" class="headerlink" title="2.1 vi &#x2F; vim 命令"></a>2.1 vi &#x2F; vim 命令</h2><p>使用<code>vim</code>编辑文档时，需要先通过<code>vim 文件名</code>格式的命令打开文件编辑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim的命令行界面如此所示</span></span><br><span class="line">~   </span><br><span class="line">~   </span><br><span class="line">~                                                                                          </span><br><span class="line">~   </span><br><span class="line">~   </span><br><span class="line"><span class="string">&quot;test1.txt&quot;</span> 1L, 7C 1,1 全部</span><br></pre></td></tr></table></figure><p>默认状态下是不可编辑的，需要按下 <code>i</code>&#x2F;<code>a</code>&#x2F;<code>o</code>键进入编辑模式。编辑完成后可以按<code>Esc</code>键退出编辑。输入<code>:wq</code>可以保存并退出文件。</p><h3 id="vim-下可以使用的操作"><a href="#vim-下可以使用的操作" class="headerlink" title="vim 下可以使用的操作"></a>vim 下可以使用的操作</h3><h4 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h4><p>在不可编辑的模式下，可以通过特定命令来进行文本操作。</p><p><code>dd</code>：剪切当前行。</p><p><code>yy</code>：复制当前行。</p><p><code>p</code>：粘贴内容到光标下方。</p><p><code>P</code>：粘贴内容到光标上方。</p><p><code>u</code>：撤销上一次操作。</p><h4 id="编辑操作"><a href="#编辑操作" class="headerlink" title="编辑操作"></a>编辑操作</h4><p>通过按下对应的字母键，也可以进行光标的移动。</p><p>通过<code>h</code>，<code>j</code>，<code>k</code>，<code>l</code>键，可以实现光标上，下，左，右的移动。</p><p>按下<code>b</code>键，可以把光标跳到当前行最前面的位置。</p><p>按下<code>w</code>键，可以跳到下一个单词的开头。</p><h2 id="2-2-grep-命令"><a href="#2-2-grep-命令" class="headerlink" title="2.2 grep 命令"></a>2.2 grep 命令</h2><p><code>grep</code>命令用于搜索文件中的内容。使用的语法如下：</p><p><code>grep [参数] 要搜索的内容 要搜索的目录</code></p><p>可以使用的参数如下：</p><p><code>-r</code>：递归搜索。</p><p><code>-i</code>：忽略大小写。</p><p><code>-n</code>：显示搜索内容在文件中的具体位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[rinko24@localhost ~]$ grep <span class="string">&quot;114514&quot;</span> test1.txt</span><br><span class="line"><span class="comment"># 在test1.txt中查找有114514字样的行</span></span><br></pre></td></tr></table></figure><h2 id="2-3-sed-命令"><a href="#2-3-sed-命令" class="headerlink" title="2.3 sed 命令"></a>2.3 sed 命令</h2><p><code>sed</code>命令用于文本操作。使用格式如下：</p><p><code>sed [参数] [-e 行数+操作\文字] [-f 行数+操作\文本文件] 要操作的文件</code></p><p>其中，<code>-e</code>后指定<strong>文本</strong>来处理输入的文本文件，<code>-f</code>后指定<strong>文本文件</strong>来处理输入的文本文件。</p><p>在这两个参数中，可以使用的操作如下：</p><p><code>a</code> ：新增。</p><p><code>d</code> ：删除，后方不需要增加文本；</p><p><code>i</code> ：插入，后接字串会在当前行的上一行出现。</p><p><code>s</code> ：取代。需要指定原字符串和新字符串。此操作也可以单独使用参数。</p><ul><li><code>g</code>：全局替换，替换一行中所有匹配的内容（默认只替换第一个匹配）。</li><li><code>i</code>：忽略大小写。</li><li><code>n</code>：替换第 <code>n</code> 次匹配（从 1 开始计数）。</li><li><code>p</code>：打印替换的行。</li><li><code>e</code>：允许新字符串中包含表达式。</li></ul><p>同时，对于命令本身，可以使用的参数如下：</p><p><code>-n</code>：显示处理后的文本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Pro13-Rinko24 CentOS7_WSL]<span class="comment"># sed -e 4a\newLine testfile.txt</span></span><br><span class="line"><span class="comment">#在testfile.txt的第四行中新增文本&quot;newLine&quot;</span></span><br></pre></td></tr></table></figure><h1 id="三、用户管理命令"><a href="#三、用户管理命令" class="headerlink" title="三、用户管理命令"></a>三、用户管理命令</h1><h2 id="3-1-用户组"><a href="#3-1-用户组" class="headerlink" title="3.1 用户组"></a>3.1 用户组</h2><p>在 Linux 中，<strong>用户组（group）</strong> 是一种用于将多个用户归类管理的机制，它允许对一组用户赋予相同的权限，从而简化权限管理。用户组和用户之间的关系是多对多的：一个用户可以属于多个用户组，一个用户组可以包含多个用户</p><h3 id="用户组的创建"><a href="#用户组的创建" class="headerlink" title="用户组的创建"></a>用户组的创建</h3><p>使用<code>groupadd</code>命令，可以新建一个用户组。</p><p>使用方法如下：</p><p><code>groupadd [参数] 用户组名称</code></p><p>可以使用的参数如下：</p><p><code>-g</code>：指定标识号（GID）。</p><p><code>-o</code>：允许重复使用GID。</p><h3 id="用户组的删除"><a href="#用户组的删除" class="headerlink" title="用户组的删除"></a>用户组的删除</h3><p>使用<code>groupdel</code>命令，可以删除一个用户组。</p><h3 id="用户组的修改"><a href="#用户组的修改" class="headerlink" title="用户组的修改"></a>用户组的修改</h3><p>使用<code>groupmod</code>命令。可使用的参数如下：</p><p><code>-r</code>：修改 GID。</p><p><code>-n</code>：修改名称。</p><h2 id="3-2-用户"><a href="#3-2-用户" class="headerlink" title="3.2 用户"></a>3.2 用户</h2><p>使用<code>useradd</code>命令。创建用户之后，可使用<code>passwd</code>更改密码。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联想小新 Pro 13 2020 款 安装 Windows 系统+黑苹果安装记录</title>
      <link href="/2024/07/27/Pro13Tutorial/"/>
      <url>/2024/07/27/Pro13Tutorial/</url>
      
        <content type="html"><![CDATA[<p>好像目前没怎么看到这个机子装黑果的教程，于是就打算写一篇作为参考了</p><h2 id="安装-Windows-系统"><a href="#安装-Windows-系统" class="headerlink" title="安装 Windows 系统"></a>安装 Windows 系统</h2><p>我这台机子不知道为什么，用原版镜像重装Win11 后，Fn+Q 的热键驱动打不上去，没法开启野兽模式，所以改用联想的 OEM 镜像。下面的创建教程应该适合所有的联想电脑。</p><p>想要下载 OEM 镜像需要先创建恢复介质的订单。国内的联想站不提供这个机子的镜像，需要到香港的站点申请。打开<a href="%5Bhttps://%5D(https://pcsupport.lenovo.com/hk/zh/lenovorecovery)">申请的网站</a>，输入机器编号，点击“送出”。</p><p><img src="https://images.shojola.top/Pro13Tutorial/Pro13Tutorial-1.png"></p><p>在下一个页面中，选择恢复镜像的语言并同意条款，点击“下一步”，按照指引登录账号进行操作。登录账号最好使用邮箱进行登录，方便后续接受恢复订单的信息。</p><p><img src="https://images.shojola.top/Pro13Tutorial/Pro13Tutorial-2.png"></p><p>中间可能会要求更改网站语言，更改语言后重新按照上面的步骤来就可以了。登录账号后会要求输入个人信息，填写后点击“Submit”。</p><p><img src="https://images.shojola.top/Pro13Tutorial/Pro13Tutorial-3.png"></p><p>看到像是下图这样的页面，订单就创建好了。</p><p><img src="https://images.shojola.top/Pro13Tutorial/Pro13Tutorial-4.png"></p><p>此时检查你注册账号使用的邮箱，会发现多出来一个订单信息的邮件，按照说明点击蓝色的“RDDS”下载创建工具。</p><p><img src="https://images.shojola.top/Pro13Tutorial/Pro13Tutorial-5.png"></p><p>下载创建工具后，按照创建工具里面的指引，创建恢复盘。提前准备好一个32G以上的U盘插入电脑，里面的内容在做启动盘时都会被删除。工具使用前必须要登录联想账号，一定要登录刚刚创建订单使用的联想账号，工具只有在识别到账号下的订单后才可以继续使用。</p><p>创建完成后，确保U盘插在电脑上，设置从U盘启动，启动恢复程序。中间会重启几次，耐心等待一会。Pro 13的出厂镜像是Windows 10 2004，恢复好后可以用原版镜像升级到Windows 11。</p><h2 id="安装黑苹果"><a href="#安装黑苹果" class="headerlink" title="安装黑苹果"></a>安装黑苹果</h2><p>我这里安装的是Sonoma 14.2.1，更低版本的系统教程通用。</p><p>先简单说一下安装黑苹果的原理，黑苹果安装的关键在于引导文件（也就是EFI），有了对应的EFI之后才可以正常引导系统进行安装。对于小新Pro 13 2020，可以使用<a href="https://github.com/daliansky/XiaoXinPro-13-hackintosh">这个项目</a>下的引导文件，具体的操作步骤之后会讲。</p><p>小新Pro 13安装黑苹果前需要刷破解BIOS并且进行相关设置，详情请参考<a href="https://github.com/daliansky/XiaoXinPro-13-hackintosh/wiki/DVMT%E8%A1%A5%E4%B8%81#%E6%B5%8B%E8%AF%95%E7%89%88bios">这篇教程</a>。</p><p>除了上面教程提到的设置之外，在BIOS中还需要另外修改以下三项（此处参考<a href="https://github.com/daliansky/XiaoXinPro-13-hackintosh/wiki/EFI-OC-PRO13%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E">这篇教程</a>）：</p><p>Security选项卡下：</p><p>Intel Platform Trust Technology &#x3D; Disable</p><p>Intel SGX Control &#x3D; Disable 【建议】</p><p>Secure Boot &#x3D; Disable</p><h3 id="1、准备安装U盘"><a href="#1、准备安装U盘" class="headerlink" title="1、准备安装U盘"></a>1、准备安装U盘</h3><p>下载好黑苹果的系统镜像，版本自选，黑苹果镜像分为两种，以dmg结尾的可引导镜像和以iso结尾的不可引导镜像，确保下载的是以dmg结尾的这种。</p><p>准备好一个32G以上大小的U盘，用balenaEtcher把镜像写入U盘。写入的时候同样会清除U盘里面的数据，记得提前备份。</p><p>如果使用balenaEtcher时，多次尝试仍然写入失败，可以改用TransMac制作启动盘。使用TransMac制作启动盘的方法可以参考<a href="https://www.mfpud.com/topics/940/">这篇教程</a>。</p><p>打开<a href="https://github.com/daliansky/XiaoXinPro-13-hackintosh">这个仓库</a>，点击绿色的<code>Code</code>标签，点击<code>Download ZIP</code>把整个仓库的文件下载下来。解压出来EFI文件夹下的EFI_OC文件夹，这个就是我们一会要用到的引导文件。</p><p>打开DiskGenius，点击左侧U盘下的EFI分区，删掉EFI目录下的所有文件，然后把刚刚下好的EFI文件替换进去。</p><p><img src="https://images.shojola.top/Pro13Tutorial/Pro13Tutorial-6.png" alt="图片来自CSDN：https://blog.csdn.net/iCanCode/article/details/108064539"></p><h3 id="2、开始安装"><a href="#2、开始安装" class="headerlink" title="2、开始安装"></a>2、开始安装</h3><p>用Windows自带的磁盘管理新分出来一个分区，创建好后格式化为NTFS分区。</p><p>U盘插入电脑，重启电脑设置从U盘启动，使用左右方向键选择“Install macOS Sonoma”，回车启动。</p><p>在安装页面中，先选择“磁盘工具”，点击右上角的“分区”按钮。可以看到两个分区。</p><p><img src="https://images.shojola.top/Pro13Tutorial/Pro13Tutorial-7.png"></p><p>选择刚刚新创建的分区，格式选择 APFS，点击“应用”。</p><p>退出磁盘工具，点击“安装 macOS”，选择刚刚的分区，按照指引安装操作。</p><p>安装过程中会重启，第一次重启过后，需要再从 U 盘引导 macOS，可以看到 OC 的引导界面多了一个启动项，这个就是安装在本地的 macOS。选择这个启动项启动，后面安装时还会重启几次，每次重启都需要从 U 盘引导系统，选择本地 macOS 的启动项，直到看到设置向导为止。此时你会发现还没有网络，不要着急，先不联网把设置向导走完，驱动下一步再补。</p><h3 id="3、补全驱动，设置本地启动项"><a href="#3、补全驱动，设置本地启动项" class="headerlink" title="3、补全驱动，设置本地启动项"></a>3、补全驱动，设置本地启动项</h3><p>现在我们是通过U 盘来启动 macOS，这一步我们需要把黑苹果的引导安装到本地。由于驱动包含在 EFI 内，所以驱动补全也可以同时完成。</p><p>本地启动的 EFI 我用了酷安 <a href="http://www.coolapk.com/u/3097066">@助人为勒</a> 老哥的文件，考虑到各种原因就不在这里放出来链接了，想要的可以直接找这位老哥私信。这个 EFI 的驱动是完整的，不知道为什么在我的电脑上无法引导 macOS，所以我对里面的配置文件做了部分修改，需要搭配这个 EFI 使用。这个EFI的网卡只适配了AX201的驱动，其他型号请自行解决。</p><p>配置文件下载请点击<a href="https://images.shojola.top/config.plist">此处</a>。</p><p>打开DiskGenius，左侧点击SYSTEM_DRV分区，打开EFI文件夹，把压缩包内的OC文件夹复制进去，然后点开OC文件夹，把我改好的config.plist文件覆盖进去。</p><p><img src="https://images.shojola.top/Pro13Tutorial/Pro13Tutorial-8.png"></p><p>然后点击上方的“工具”——“设置UEFI BIOS启动项”，点击左侧的“添加”，文件选择OC文件夹下的OpenCore.efi，然后右侧启动项名称改为“OpenCore”，点击“保存当前启动项设置”，点击左侧的“上移”，把OpenCore放在第一位。点击“取消”退出。</p><p><img src="https://images.shojola.top/Pro13Tutorial/Pro13Tutorial-9.png"></p><p>重启电脑，此时就可以进入OpenCore的引导界面了，选择macOS启动，也可以看到网卡已经能用了。这个配置文件已经注入了三码，iCloud也可以正常使用。</p><p>到这里所有的工作就都完成了，可以开始体验黑苹果啦~</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDVX手台自制教程</title>
      <link href="/2024/05/19/SDVX-DIY/"/>
      <url>/2024/05/19/SDVX-DIY/</url>
      
        <content type="html"><![CDATA[<blockquote><p>突然就想做一个SDVX的手台玩了，第一次搞这些踩了不少坑，就在这里简单写一下自己的制作经验。</p><p>在开始制作之前，请确认你自己有足够的耐心和一定的动手能力，一般来说我更建议买现成的商业手台，虽然要比自己做贵一些，但是更方便，体验也更好一些。</p><p>在制作过程中，我参考了以下项目和文章，在这里对各位大佬表示感谢：</p><p><a href="https://www.bluesdawn.top/sdvx-diy/index.html">简单自制SDVX手台（控制器）</a></p><p><a href="https://github.com/lizardbeans/sdvx-diy">lizardbeans&#x2F;sdvx-diy</a></p><p><a href="https://github.com/FreezeRasis/sdvx-diy-pcb">FreezeRasis&#x2F;sdvx-diy-pcb</a></p><p><a href="https://github.com/Sirius-RX/SDVX-SP_Con">Sirius-RX&#x2F;SDVX-SP_Con</a></p><p>并且特别感谢<a href="http://www.coolapk.com/u/1704149">@Huang_xuan</a> 帮助修改固件和组装过程的各种答疑解惑！</p></blockquote><h2 id="一、材料准备"><a href="#一、材料准备" class="headerlink" title="一、材料准备"></a>一、材料准备</h2><p>我做手台用到的材料如下：</p><p>1.开发板：用的是<a href="https://github.com/FreezeRasis/sdvx-diy-pcb">这个仓库</a>里的方案，需要下载嘉立创EDA，然后把仓库里的json文件导入后下单，具体使用方法仓库里面写的已经很清楚了。嘉立创每个月可以免费下单两次PCB，在<a href="https://www.jlc.com/newOrder/#/collectCoupons">下单平台</a>里领券之后再确认订单。开发板需要买Pro Micro，芯片是ATMEGA32U4。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(1).jpg"></p><p>2.外壳：直接去淘宝一家名叫“多美歌外壳”做的雪弗板，他们那里有现成的方案，不要图案的话可以便宜20块。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(2).jpg"></p><p>多美歌的板子厚度是10mm，虽然会有点厚，但是在不需要加装亚克力板的情况下，实测对安装没什么影响。或者你也可以用外壳的CAD文件自己定制。CAD文件你可以在<a href="https://github.com/Sirius-RX/SDVX-SP_Con">这个仓库</a>里找到：</p><p>3.按键：用的是淘宝“喵呜手台店”的按键，优点就是便宜而且自带弹簧。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(3).jpg"></p><p>体验想要更好的话可以换星韵家的（淘宝“星韵工作室”）或者三和按键（特别贵，但据说手感也非常好），弹簧也需要自己另外买。</p><p>4.微动：霍尼韦尔V15S05-1EZ050-K01，一共需要买7个，想要体验更好就上欧姆龙的。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(4).jpg"></p><p>5.旋转编码器和旋钮：需要买磁电式NPN的，工作电压5-24V，脉冲600ppr，AB两相，需要买两个。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(5).jpg"></p><p>旋钮就选一般的全铝旋钮就可以。规格直径30mm高25mm，也是买两个。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(6).jpg"></p><p>6.其他的一些小零件：</p><p>（1）M5*25 自攻螺丝 19个，用来固定外壳；</p><p>（2）M3*16 平头螺丝6个，用来固定旋转编码器；</p><p>（3）5V蓝色迷你LED灯5个，红色2个，红色的需要安装到FX-L和FX-R两个按键上，蓝色的安装到其他按键上，如果你不需要灯效就不需要买；</p><p>（4）带灯按键微动线7条，用来连接按键到板子上，淘宝搜对应关键词就能找到了；</p><p>（5）XH2.54 公头单头端子线 2条，用来连接旋转编码器到板子上</p><p>（6）XH2.54直针座 4P 9个，焊接到板子上需要；</p><p>（7）Type-C&#x2F;MicroUSB延长线，具体看你买的板子用的接口；</p><p>（8）防滑脚垫4个（可选）；</p><p>7.需要的工具：</p><p>（1）焊接相关的东西（烙铁，锡丝，松香等等）；</p><p>（2）一把十字头螺丝刀；</p><p>（3）一套六角扳手；</p><p>（4）一把剪线钳；</p><p>（5）一把热熔胶枪，用于固定PCB板；</p><h2 id="二、组装过程"><a href="#二、组装过程" class="headerlink" title="二、组装过程"></a>二、组装过程</h2><h3 id="1-焊接"><a href="#1-焊接" class="headerlink" title="1.焊接"></a>1.焊接</h3><p>分别需要焊接板子和旋转编码器的线头。板子的左上角已经给开发板预留了位置，把Pro Micro接口朝外放在左上角的位置，然后转到PCB板的背面，把开发板的针脚焊接在板子上。剩余的接口都是给端子座预留了，在每个位置上用类似的方法焊接一个上去。焊接的教程可以看<a href="https://www.bilibili.com/video/BV1hc41167iA">这个视频</a>。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(7).jpg"></p><p>接下来是线头的焊接。按照PCB板的引脚定义，从左到右的顺序应该为：5V，OUTA，OUTB，GND。旋转编码器上已经写清楚了不同颜色的线对应的功能，把他们按照这个顺序焊接到端子线上，焊接好后记得分别缠上一圈电工胶带。焊接线头可以参考<a href="https://www.bilibili.com/video/BV1Vo4y1q71S">这个教程</a>。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(8).jpg"></p><h3 id="2-固件上传"><a href="#2-固件上传" class="headerlink" title="2.固件上传"></a>2.固件上传</h3><p>需要下载Arduino IDE，把焊接好后的板子连接到电脑上，点击“Tools”选项卡,“Board”一栏选择“Arduino Leonardo”，端口选择你板子的端口。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(9).jpg"></p><p>在<a href="https://github.com/Huangxuan512/sdvx-diy-pcb/tree/master/code%20Leonardo/Arduino%20Leonardo/leovx">这个仓库</a>里下载固件，双击leovx.ino在Arduino中打开，然后点击左上方的右箭头键，把固件上传到开发板。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(10).jpg"></p><h3 id="3-组装"><a href="#3-组装" class="headerlink" title="3.组装"></a>3.组装</h3><p>(1)按键部分</p><p>按键的包装里一般会这几部分：按键本体，套在按键外面的壳子，微动支架，以及固定壳子的螺母（不知道怎么叫准确，姑且先这么叫吧）。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(11).jpg"></p><p>先把按键扣在雪弗板上对应的位置，</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(12).jpg"></p><p>然后再把壳子扣在按键的背面，</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(13).jpg"></p><p>把螺母拧上去拧紧，</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(14).jpg"></p><p>按键部分就组装完成了。</p><p>把微动固定在微动支架上，支架上有两个凸出来的地方，和微动是对应的，按照这个地方安装微动。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(15).jpg"></p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(16).jpg"></p><p>把灯固定在微动支架的下端，注意灯上长的一端是正极，这个一会接线的时候需要注意。把安装好的微动支架拧到按键背面，这样按键部分就安装好了。其他的按键也用类似的办法装上去；</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(17).jpg"></p><p>(2)旋转编码器部分</p><p>旋转编码器上有6个螺丝孔，把其中的任意三个对准雪弗板正面预留的空位上，然后用M3*16的螺丝拧上去。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(18).jpg"></p><p>你可以看到旋转编码器会露出一截轴，用六角螺丝刀，把旋钮固定到轴上面。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(19).jpg"></p><p>(3)接线部分</p><p>PCB板上已经写好了每个插口对应的部分，前面已经焊接好了旋转编码器的线，直接插到对应位置就可以了。对于按键部分，我简单做了一个图展示怎么连接：</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(20).jpg"></p><blockquote><p>PS：正负极的位置没有严格区分的，也就是说在这张图的支架上，把灯的正极接到右边，负极接到左边也是可以的，但是必须保证正负极在板子引脚上的接线是对的，也就是编号为2的口必须接正极，4号口必须接负极。</p></blockquote><p>(4)外壳部分</p><p>板子上已经给了组装时候需要用到的孔位了，先把板子按照形状拼好，然后把M5*25的自攻螺丝放到孔里，直接使劲拧进去就行，注意区分预留USB孔位的那一面，不要把螺丝拧到这里。把脚垫贴在手台底部的四个角。</p><p>(5)其他部分</p><p>用热熔胶枪，把板子固定到背面FX-L和FX-R两个按键中间的位置。然后把延长线一端接到板子上，另一端从壳子上预留的孔位绕出来。先暂时不要把正面合盖。</p><p><img src="https://images.shojola.top/SDVX_DIY%2FSDVX_DIY%20(21).jpg"></p><h3 id="4-软件测试"><a href="#4-软件测试" class="headerlink" title="4.软件测试"></a>4.软件测试</h3><p>在spice里绑定对应的键位，并测试功能是否正常，注意旋钮需要另外在“Analogs”下绑定。如果发现旋钮左右旋转方向是反过来的，需要勾选“Invert Axis”选项。灵敏度推荐调整为0.25。</p><p><img src="https://images.shojola.top/spice64_analogs.png"></p><blockquote><p>如果你发现在这个菜单下，旋钮高速旋转时并不能被正确识别，请不要慌张，进游戏后在服务菜单里再测试一下，只要游戏里旋转正常就没什么问题。</p></blockquote><p>测试没有问题之后就可以合盖安装了。</p><p>至此，你已经做好了一个可以正常游玩的SDVX手台，可以愉快玩耍啦~</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rEFInd安装及简单配置指南</title>
      <link href="/2024/04/29/rEFInd-Tutorial/"/>
      <url>/2024/04/29/rEFInd-Tutorial/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这几天试着往电脑上安装FydeOS，不知道为什么FydeOS自带的rEFInd安装不上去，就试着自己搞了一下，在此整理了自己配置的步骤。</p><p>rEFInd是一个UI更为现代化的启动引导器，在Linux&#x2F;Mac下，rEFInd可以使用自带的脚本安装，Windows则需要自己配置。以下内容适用于使用EFI启动的Windows平台。</p><p><strong>Surface设备以及部分电脑配置rEFInd时，可能需要关闭安全启动（Secure Boot）。</strong></p></blockquote><h1 id="1-安装rEFInd"><a href="#1-安装rEFInd" class="headerlink" title="1.安装rEFInd"></a>1.安装rEFInd</h1><p>从<a href="http://sourceforge.net/projects/refind/files/0.14.2/refind-bin-0.14.2.zip/download">官网</a>下载rEFInd的相关文件，得到一个zip结尾的压缩文件。打开压缩文件，将里面的<code>refind</code>文件夹复制出来。</p><p>打开DiskGenius，在左侧的窗口里展开<code>SYSTEM</code>分区，双击<code>EFI</code>文件夹，然后把刚刚解压出来的<code>refind</code>文件夹拖到右侧的窗口里，把文件夹复制到分区里。</p><p>然后点击上方的<code>工具</code>选项卡，点击<code>设置UEFI BIOS启动项</code>，在弹出来的窗口中点击<code>添加</code>，然后在新窗口中分别打开<code>EFI</code>，<code>refind</code>文件夹，双击<code>refind_x64.efi</code>，软件会提示“设置完成”，列表中会多一个名叫“New Boot Entry”的启动项。把这个启动项改名为“rEFInd”，点击<code>保存当前启动项设置</code>，然后再把它移动到第一位。</p><p>到这里，rEFInd的安装就安装完毕了。此时重启电脑，应该可以看到rEFInd的启动界面。</p><h1 id="2-配置rEFInd"><a href="#2-配置rEFInd" class="headerlink" title="2.配置rEFInd"></a>2.配置rEFInd</h1><p>rEFInd的默认主题不是很好看，启动项也可能会有一些缺失，因此我们还需要做一些配置来舒适使用。在rEFInd的文件目录下可以找到一个名叫<code>redind.conf-sample</code>的文件，这个就是配置文件模板。把这个文件复制一份，重命名为<code>refind.conf</code>，然后用文本编辑器打开。这个文件里，我们一般需要配置这几项：</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Timeout in seconds for the main menu screen. Setting the timeout to 0</span><br><span class="line"># disables automatic booting (i.e., no timeout). Setting it to -1 causes</span><br><span class="line"># an immediate boot to the default OS *UNLESS* a keypress is in the buffer</span><br><span class="line"># when rEFInd launches, in which case that keypress is interpreted as a</span><br><span class="line"># shortcut key. If no matching shortcut is found, rEFInd displays its</span><br><span class="line"># menu with no timeout.</span><br><span class="line">#</span><br><span class="line">timeout 20</span><br></pre></td></tr></table></figure><p>这一项配置等待时间，默认是20秒，建议改为5秒。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Set the screen&#x27;s video resolution. Pass this option one of the following:</span><br><span class="line">#  * two integer values, corresponding to the X and Y resolutions</span><br><span class="line">#  * one integer value, corresponding to a GOP (UEFI) video mode</span><br><span class="line">#  * the string &quot;max&quot;, which sets the maximum available resolution</span><br><span class="line"># Note that not all resolutions are supported. On UEFI systems, passing</span><br><span class="line"># an incorrect value results in a message being shown on the screen to</span><br><span class="line"># that effect, along with a list of supported modes. On EFI 1.x systems</span><br><span class="line"># (e.g., Macintoshes), setting an incorrect mode silently fails. On both</span><br><span class="line"># types of systems, setting an incorrect resolution results in the default</span><br><span class="line"># resolution being used. A resolution of 1024x768 usually works, but higher</span><br><span class="line"># values often don&#x27;t.</span><br><span class="line"># Default is &quot;0 0&quot; (use the system default resolution, usually 800x600).</span><br><span class="line">#</span><br><span class="line">#resolution 1024 768</span><br><span class="line">#resolution 1440 900</span><br><span class="line">#resolution 3</span><br><span class="line">#resolution max</span><br></pre></td></tr></table></figure><p>这一项设置分辨率，一般的格式为<code>resolution 横边像素 竖边像素</code>。建议直接设置为<code>max</code>，显示为支持的最大分辨率。配置时需要删掉<code>resolution</code>前的井号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Enable touch screen support. If active, this feature enables use of</span><br><span class="line"># touch screen controls (as on tablets). Note, however, that not all</span><br><span class="line"># tablets&#x27; EFIs provide the necessary underlying support, so this</span><br><span class="line"># feature may not work for you. If it does work, you should be able</span><br><span class="line"># to launch an OS or tool by touching it. In a submenu, touching</span><br><span class="line"># anywhere launches the currently-selection item; there is, at present,</span><br><span class="line"># no way to select a specific submenu item. This feature is mutually</span><br><span class="line"># exclusive with the enable_mouse feature. If both are uncommented,</span><br><span class="line"># the one read most recently takes precedence.</span><br><span class="line">#</span><br><span class="line">#enable_touch</span><br><span class="line"></span><br><span class="line"># Enable mouse support. If active, this feature enables use of the</span><br><span class="line"># computer&#x27;s mouse. Note, however, that not all computers&#x27; EFIs</span><br><span class="line"># provide the necessary underlying support, so this feature may not</span><br><span class="line"># work for you. If it does work, you should be able to launch an</span><br><span class="line"># OS or tool by clicking it with the mouse pointer. This feature</span><br><span class="line"># is mutually exclusive with the enable_touch feature. If both</span><br><span class="line"># are uncommented, the one read most recently takes precedence.</span><br><span class="line">#</span><br><span class="line">#enable_mouse</span><br></pre></td></tr></table></figure><p>这两项分别配置触控支持和鼠标支持，建议开启，删掉末尾行前的井号即可。</p><h2 id="启动项配置"><a href="#启动项配置" class="headerlink" title="启动项配置"></a>启动项配置</h2><p>一般来说，rEFInd会自动搜索和添加启动项，如果没有对应的启动项，则需要我们自行配置。常用的配置参数一般如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menuentry &quot;启动项名称&quot; &#123;</span><br><span class="line">    loader 启动文件目录</span><br><span class="line">    icon 图标目录</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>举个例子，如果要配置Windows启动项，那么配置参数应该写成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menuentry &quot;Windows&quot; &#123;</span><br><span class="line">    icon /EFI/refind/icons/os_win.png</span><br><span class="line">    loader /EFI/Microsoft/Boot/bootmgfw.efi</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>rEFInd的默认界面确实有点不好看，不过我们可以自己安装主题来美化。<a href="https://github.com/topics/refind-theme">这个页面</a>下整理了很多rEFInd的主题，要使用的话直接下载整个仓库的文件就可以。在refind的目录下新建一个名叫<code>themes</code>的文件夹，然后把主题文件夹复制进去，再在配置文件末尾添加这样一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include themes/主题文件夹的名称/theme.conf</span><br></pre></td></tr></table></figure><p>这样就配置好了。</p><h2 id="隐藏多余的启动项"><a href="#隐藏多余的启动项" class="headerlink" title="隐藏多余的启动项"></a>隐藏多余的启动项</h2><blockquote><p><strong>这一步需要在默认主题下进行。</strong></p></blockquote><p>有些启动项可能会重复，在启动界面按delete键即可隐藏对应的启动项。</p><p>到这里rEFInd的安装和基本配置就完毕了。rEFInd的玩法远远不止如此，想要了解更多的话，可以参阅官方文档。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻译思考：萧伯纳《人与超人》选段</title>
      <link href="/2023/11/09/Translation-Thoughts-1/"/>
      <url>/2023/11/09/Translation-Thoughts-1/</url>
      
        <content type="html"><![CDATA[<p>今天翻译课讲茅盾的翻译思想，里面提到了这样的一个例子，原文是这样的：</p><p><strong>What a piece of work is man! says the poet. Yes: but what a blunderer! Here is the highest miracle of organization yet attained by life, the most intensely alive thing that exists, the most conscious of all the organisms; and yet, how wretched are his brains!</strong></p><p>茅盾的译文是怎么样的，课上讲的已经记不清了，网络上也已经不可考，线下搜的时候知道这个选段是出自于萧伯纳的《人与超人》。单拿出来这段话其实是有点云里雾里的，现在就结合萧伯纳的思想和原文内容做一点翻译讲解。<br>在这里我们需要先了解萧伯纳的“生命力”思想。萧伯纳认为，人是依靠“生命力”来生存和进化的，而这个生命力是主观的，需要靠自己来掌控。如果说得更为通俗一点就是，如果把整个人类的命运比作一艘船，那么这艘船并非是随波逐流的，而是依靠人类自己来掌舵寻找方向。而在这里，掌舵的人就是“超人”，他们是参透了生命的意义，有能力引领人类走向正确道路的人，有点类似于我们今天的精英主义。</p><p>另一个是故事发生的背景，选段是在主人公的梦中（由于主人公的故事对于理解选段意义不大，因此在这里略过不讲），选自一个西班牙传说 《塞维拉的荡子与石像之客》 ，在这个传说中，主人公唐璜是一个浪荡的花花公子，他到处追求女性，最后同安娜恋爱，发生暧昧关系，安娜的父亲对此愤愤不平，他要与唐璜决斗，最后被唐璜击败。安娜为父亲立雕像而警示自己的愚蠢行为，但唐璜毫无悔恨之意，甚至为了展现胆量邀请雕像共进晚餐。午夜时分，雕像应约而至，唐璜反而大为惊恐。雕像要求唐璜改过自新，但唐璜拒绝，最后唐璜被拉入地狱。选段即来自在地狱，唐璜，安娜，雕像和魔鬼路西法的对话。<br>在萧伯纳的笔下，天堂的人们各司其职，整日冥想，过着平和的生活，但是地狱却不是如此，人们的意识游离，居无定所，也没有余地去进行思考。安娜想要前往天堂，魔鬼嗤之以鼻，认为人类是有自己的意识，但是他们崇尚的不是生而是死。比起对于生的渴望，人类更喜欢用死说话，以此来展现自己的“生命力”。在魔鬼看来，人类发明纺织机这些便利的机器只是展现了他们的懒惰，而剩余的部分都被他们拿来用作战争和决斗。所以最好的方法还是顺其自然，在地狱什么都不用想最好。但唐璜是坚决反对的，他认为魔鬼的话不假，但魔鬼所说的随波逐流对人类是很不适用的，人类和动物不同的是人类拥有理智，这证明他们拥有着更高的追求。人向死而生不错，但向死而生也就意味着他们拥有理想，理想会指引人类走上正确的道路，而不是漫无目的地遵从简单的自然规律。不难看出，唐璜的这番话其实就是萧伯纳本人思想的体现，也就是说人类的生命力是由自己掌控的。<br>说到这里，再看回原文，选段的地方来自于雕像的发言，雕像认为人类是精巧不错，但是头脑却不怎么够用，不愿面对现实，魔鬼接过话茬，批评人类总是崇尚死而不是生。结合上面的背景，想要进行理解这段话就不难了。<br>贴一个我自己的翻译，参考了一个译本：<br><strong>诗人称赞道，人类是多么灵巧！是啊，可人类又是多么的浮躁！人类是生命的组织中最精妙的存在，是最生机勃勃的存在，生物中最有意识的存在，可他们的脑子却又是多么的差劲！</strong></p><p><em>参考资料：黄嘉德《萧伯纳论“生命力”——评喜剧〈人与超人〉》</em></p>]]></content>
      
      
      <categories>
          
          <category> 随便写的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPad mini 5使用体验</title>
      <link href="/2023/11/05/iPad-mini-5-experience/"/>
      <url>/2023/11/05/iPad-mini-5-experience/</url>
      
        <content type="html"><![CDATA[<p>因为小米平板5的书写体验实在是过于糟糕，并且我使用的二代灵感触控笔中了笔尖裂痕的老毛病，所以干脆就直接出掉换成了iPad，在同价位的iPad Air 3和iPad mini 5中，最后还是选择了后者。<br>选择iPad mini 5主要还是看中了小巧的机身，我用的第一个平板就是小米平板1，所以对小尺寸平板有着好感。到手后的第一感觉也是如此，单手拿起来也不会觉得太沉重，小小的很可爱。</p><p><img src="https://images.shojola.top/2791664_d27aae90_3160_4017_336@1280x1707.jpeg.m.jpg"></p><p>尽管在全面屏当道的今天，mini 5的外观不太入流，真的用起来了也不会太计较这些。mini 5保留了Home键，对于我这种手汗比较严重的来说，识别率算不上高，贴个指纹贴可以改善很多。<br>得益于iPadOS的优化，就算是没有高刷，从120Hz切过来也能很快就适应——至少我是这样。很多人吐槽iPadOS的bug，在我这里实际上没有遇到很影响使用体验的bug，完成度是要比MIUI For Pad高很多的，但是有几个点还是想吐槽一下。在桌面的时候，长按Dock栏右边的应用图标再进行拖动，这样重复操作，可以在桌面上生成一个应用的多个图标。我一开始以为这个是bug，但是在更新17.1之后，这个特性依然存在。不太理解这样的用意是什么，如果是为了方便归类，感觉也没必要做出这样的设计。</p><p><img src="https://images.shojola.top/2791664_53322440_3160_4022_877@2048x1536.png.m.jpg"></p><p>还有一个是壁纸设置的问题，在iPadOS 17设置壁纸，如果壁纸超出了一定的范围，会自动为壁纸顶部添加虚化效果。在一些情况下，这个功能确实可以让壁纸更加匹配桌面，但是这个判定的范围很怪，有的时候，一张壁纸在不添加虚化的情况下，缩放比例到最小是可以正好覆盖壁纸的。但是在iPadOS 17里面，往往把壁纸缩放到一半的时候就会添加虚化了，很影响观感。<br>在17.1中添加了可以关闭虚化的选项，但这个选项也就是自动把你的壁纸缩放到恰好不会虚化的比例，而不是真的关掉了这个功能。<br>而且，就算是到了17，iPad上依然不能下载计算器，不是很懂苹果的逻辑，这玩意实现很难吗？</p><p><img src="https://images.shojola.top/2791664_2d5b77db_3160_4028_410@2048x1536.png.m.jpg"></p><p>不过抛开这些，iPadOS的总体体验还是十分优秀的，在我看来是可以排到平板系统中的前排的。<br>在大多数人看来，小尺寸平板更适合游戏用。我主要是玩音游，因此这一部分主要讲音游的使用体验。由于iPad mini 5用的还是主页键导航，因此不会因为全面屏手势造成误触，打开勿扰模式就能得到很好的游玩体验了。据说mini 5有断触的通病，我这里并没有体验到，几乎没有拖判，吃音这些问题。iPad mini 5用的是A12，已经足够应付这部分游戏了，在Project Sekai中，播放2DMV和3DMV的时候会偶发小卡顿，别的都可以稳定在60帧稳定运行。</p><p><img src="https://images.shojola.top/2791664_0f626c0c_3160_4037_798@1792x821.jpeg.m.jpg"></p><p>同时因为小尺寸，玩Rotaeno这类需要手持设备的音乐游戏时体验也不错，如果用大尺寸平板玩可能就会有“习武之人”的感觉了。</p><p><img src="https://images.shojola.top/2791664_c8e26220_3160_4043_194@1661x1279.jpeg.m.jpg"></p><p>而且它有3.5毫米耳机孔诶，这对音游党来说真的蛮实用的。<br>这里有一个小插曲，iPad端的浏览器限制真的很严格，我本来打算用Safari模拟手台玩Chunithm，但是在全屏模式下，你玩没一会，Safari就会立马蹦出来窗口提醒你，全屏输入很危险，是不是还要继续使用，并且这个窗口是不能一劳永逸关掉的，把他叉掉之后，玩一会依然会蹦出来，换了第三方浏览器也一样。可是不全屏吧，玩起来多少有点膈应……</p><p><img src="https://images.shojola.top/2791664_be8ced67_3160_4047_127@2048x1536.png.m.jpg"></p><p>iPad mini 5支持一代Apple Pencil，我现在也在用它记笔记。虽然大屏平板确实记笔记更加舒服，但其实mini 5这种小尺寸平板记起来也并没有差到哪。我选择mini 5 的原因主要还是它和一般笔记本的尺寸很像。</p><p><img src="https://images.shojola.top/2791664_739bd6a0_3160_4049_51@1702x1276.jpeg.m.jpg"></p><p>记笔记我用的是GoodNotes，对我来说买断制的GoodNotes 5就已经足够使用了，该有的基本上都有。实际书写起来，由于GoodNotes默认的格子间距都比较小，默认情况下我都是放大了再写，流畅度方面自然是薄纱小米平板5+二代灵感触控笔，搭配类纸膜会有类似在纸上书写的感觉，不需要专门换成金属笔尖。不过一代的Apple Pencil实在是太不优雅了，没有磁吸充电，只能插到平板的充电口上补电，保护套没有给笔预留空间的话，收纳起来也巨麻烦，笔身还特别容易沾灰。</p><p><img src="https://images.shojola.top/2791664_500ce6ce_3160_4053_54@1702x1276.jpeg.m.jpg"></p><p>仔细看就能看到笔上的灰尘，就算是擦干净了也会很快变成这样</p><p>（这下知道为什么苹果还给Apple Pencil准备保护套了）（但是一个就要243……）</p><p><img src="https://images.shojola.top/2791664_e09da922_3160_4059_278@828x1073.jpeg.m.jpg"></p><p>既然要用平板写字，那么自然离不开的就是用它看网课了。我不是很追求音质，单扬声器对我来说问题不大，播放视频对mini 5来说肯定是不在话下，由于屏幕比例的问题，大部分视频都会有大黑边，有点不爽。</p><p><img src="https://images.shojola.top/2791664_9aa9c1bc_3164_4189_302@1702x1276.png.m.jpg"></p><p>在打像是Cytus II这种全屏音游的时候，屏幕比例也会为音符的定位带来干扰，需要用时间慢慢适应。<br>对了，还有这个屏幕边缘，虽然是全贴合屏，但是不知道为什么看起来有一圈黑边，有那么一点影响观感。</p><p><img src="https://images.shojola.top/2791664_e5b0908b_3164_4192_289@1280x1707.png.m.jpg"></p><p>除了写字，我一般还会用平板来码字用。可惜的是，官方没有给mini系列准备秒控键盘，罗技这些体量比较大的三方配件厂也没有生产这些。可能大家都默认觉得小平板不适合打字，在我这里使用其实感觉是刚刚好的。Word对于10.1英寸以下的iPad是免费的，在平板上连接蓝牙键盘和鼠标，可以应付一些简单的码字工作。键盘我这里用的是罗技的K380，足够与mini 5搭配使用了。</p><p><img src="https://images.shojola.top/2791664_36043bdf_3164_42_434@1705x1280.png.m.jpg"></p><p>使用Word还有一个好处，就是可以通过OneDrive同步工作进度，在iPad编写大体内容后，可以很方便地转到电脑上进行进一步操作。</p><p><img src="https://images.shojola.top/2791664_ce482d11_3164_4203_663@1280x1707.jpeg.m.jpg"></p><p>话是这么说，但iPad的码字体验其实并没有安卓好，iPadOS不支持实体键盘使用第三方输入法，当你在触屏情况下调出第三方输入法，而此时再用实体键盘，它就会傻傻地呆在这里，既不会切换到默认输入法，也不会显示候选词，仍需努力。<br>在换了第三方新电池的情况下，iPad mini 5的续航表现勉强及格，一上午亮屏3小时，大部分时间记笔记，小部分时间摸鱼，消耗大约50%的电量，用努比亚65W充电器充一中午，可以从30%补电到大约90%，足够下午的使用了。</p><p><img src="https://images.shojola.top/2791664_1eb7b108_3164_421_970@1440x1080.jpeg.m.jpg"></p><p>我这台mini 5不知道为什么，就算是轻度使用，发热也比较严重，推测可能是因为平板端，A12 的性能释放相对更加激进导致的。<br>拍照……emmmm，至少上课拍个ppt还是没问题的。</p><p><img src="https://images.shojola.top/2791664_e4574f9d_3164_4217_972@1440x1080.jpeg"></p><p>通篇下来来看，好像很多篇幅都是我在对mini 5进行吐槽，实际上我用的时候，对他是真的挺满意的。在把我的手机换到iPhone之后，设备间的生态联动也让我体验到了iPad的优势之处。在GoodNotes里，你可以用iCloud同步，在iPhone上查看你的笔记，但在安卓端，只能通过第三方存储服务，或者另外安装HMS Core。别的品牌的生态固然也可以通过云服务来同步图片，或者通过接力，让内容在平板和手机间流转，但在我看来，苹果的号召力更强，集成度也更高，所以这也是为什么我换到了苹果生态，虽然组建这套生态付出更高一些，但也可以用得更舒心一些。<br>回到iPad mini 5，如果你真的想用一千多的这个价位入手iPad，我更建议iPad Air 3或者iPad Pro 2017，对于大部分人来说，还是更大的屏幕是刚需，大屏幕也可以面对更多的使用场景。不过，小小的也很可爱，对于我这个算是小屏爱好者的学生来说，它确实给我带来了很好的体验。</p>]]></content>
      
      
      <categories>
          
          <category> 随便写的 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《跟Wakaba酱一起学Git使用》笔记</title>
      <link href="/2023/10/22/Study-Git-With-Wakaba/"/>
      <url>/2023/10/22/Study-Git-With-Wakaba/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Git是什么？"><a href="#一、Git是什么？" class="headerlink" title="一、Git是什么？"></a>一、Git是什么？</h1><h2 id="1-Git能解决的事情"><a href="#1-Git能解决的事情" class="headerlink" title="1.Git能解决的事情"></a>1.Git能解决的事情</h2><p>Git是<strong>版本管理系统</strong>。它具有以下功能：</p><ul><li>更方便地记录文件状态。如果使用手动备份，如果某个时间的备份丢失了，那么就没法返回到这个时间点对应的状态了，并且手动备份管理起来也很麻烦。如果使用Git，不仅只需要一个工作文件夹，也可以很方便地返回各个修改点的文件状态。</li><li>可以多人协作修改文件。一般情况下，多人协作修改文件时，只能口头询问然后手动修改，使用Git，可以自动汇总多人的修改。</li><li>能记录修改的原因。手动修改文件时，只能询问修改人，而Git可以进行记录，需要的时候查一下历史记录就可以了。</li></ul><h2 id="2-作为交流场所的Github和Bitbucket"><a href="#2-作为交流场所的Github和Bitbucket" class="headerlink" title="2.作为交流场所的Github和Bitbucket"></a>2.作为交流场所的Github和Bitbucket</h2><p><strong>Github</strong>和<strong>Bitbucket</strong>是常用的代码托管服务。除了托管服务之外，他们还提供互动交流的功能。这个教程中，我们重点介绍Github。你可以点击<a href="https://github.com/">这里</a>来访问Github。</p><h1 id="二、一个人独自使用Git"><a href="#二、一个人独自使用Git" class="headerlink" title="二、一个人独自使用Git"></a>二、一个人独自使用Git</h1><h2 id="1-安装可以简单使用Git的工具"><a href="#1-安装可以简单使用Git的工具" class="headerlink" title="1.安装可以简单使用Git的工具"></a>1.安装可以简单使用Git的工具</h2><p>在本教程中，我们用SourceTree来进行教学。相比较直接使用命令行进行操作，SourceTree的图形化界面更方便新手的操作。你可以点击<a href="https://www.sourcetreeapp.com/">这里</a>下载。</p><p>安装教程什么的就不需要说明了吧？;)</p><h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h2><p>仓库，顾名思义，就是存放各种东西的地方，它可以保存过去文件的各种状态。我们接下来的各种操作，都要在仓库之间操作。我们先从创建一个本地仓库开始。</p><p>先在本地创建一个文件夹，我们这里把它命名为“sample”。接下来我们把这个文件夹初始化为仓库，打开SourceTree，点击菜单栏下方的“Create”，点击“浏览”，选择刚刚的文件夹。然后，在第二行输入仓库的名字，点击“创建”按钮。如果提示路径重复，则点击“是”进行覆盖。这样，我们就创建好了一个空仓库。</p><blockquote><p>如何确认仓库是否已经初始化了呢？我们先在Windows打开“显示隐藏文件”这个选项，然后查看刚刚的文件夹，目录下是否有一个叫 <code>.git</code>的文件夹。如果有的话，那么就证明已经创建好了。在 <code>.git</code>这个文件夹里，存储着过去的文件与目录的状态。</p></blockquote><h2 id="3-提交"><a href="#3-提交" class="headerlink" title="3.提交"></a>3.提交</h2><p>我们先想象一个准备什锦烧原料的过程，在这个过程中，用相机记录下来各个过程。在上面的过程可以形容如下：</p><p>（1）把原料放在碗里，按照比例混合好；</p><p>（2）把装着混合好的原料的碗放上摄影台；</p><p>（3）拍摄此刻原料的状态。</p><p>在这个过程中，我们一共经历了三个状态：混合原料（操作），放上摄影台（暂存），拍摄照片（提交）。而Git中提交代码的操作就是这样的，先对源代码进行操作，将操作存入暂存区后再进行提交。</p><p>SourceTree可以察觉仓库内的任何变化，点击左侧“WORKSPACE”下的History按钮，我们可以很方便地查看仓库中的操作记录。<br><img src="https://images.shojola.top/SourceTree_History_d41d8cd98f00b204e9800998ecf8427e.png" alt="https://images.shojola.top/SourceTree_History_d41d8cd98f00b204e9800998ecf8427e.png"></p><p>在SourceTree中，上述操作过程是这样完成的：</p><p>编辑好代码之后，先点击“暂存所有”，将文件保存到暂存区。暂存好的文件会转移到上方“已暂存文件”一栏中。<img src="https://images.shojola.top/SourceTree_Staging_d41d8cd98f00b204e9800998ecf8427e.png" alt="https://images.shojola.top/SourceTree_Staging_d41d8cd98f00b204e9800998ecf8427e.png"></p><p>暂存完毕后点击左上角的“提交”，然后在界面最下方的文字框内输入对这次提交内容的说明，编辑好后点击右下角的“提交”按钮，等待提交完成即可。</p><blockquote><p>提交内容的说明是很重要的，因为Git可以记录提交的时间，提交者和内容，但并不能自动记录提交的原因，因此这部分必须要认真如实填写，方便后续的维护。</p></blockquote><p>每一次的“提交”操作都相当于是创建了一个版本，也就是添加了一条版本管理的历史记录。像刚刚这样重复操作，我们就可以记录下操作的历史。</p><blockquote><p>想撤回某些文件的暂存时，只需要按住Ctrl键，在“已暂存文件”一栏下选择需要取消的文件，然后点击“取消选定暂存”即可。如果用刚刚什锦烧的例子说明，取消暂存就相当于是把原料碗从摄影台拿下来，等原料调好了再放上去拍照。</p><p>对于想要分开提交多个文件，或者没有提交时想要有所变更的情况下，都需要用到暂存区域。</p></blockquote><h2 id="4-用checkout移动提交"><a href="#4-用checkout移动提交" class="headerlink" title="4.用checkout移动提交"></a>4.用checkout移动提交</h2><p>继续刚刚什锦烧的例子。我们做什锦烧需要的原料有：什锦烧粉，鸡蛋，卷心菜等等。现在我们按照以下的顺序，把每个放入原料的过程拍了照：</p><p>（1）放入什锦烧粉，水和鸡蛋；</p><p>（2）放入卷心菜；</p><p>（3）放入可乐。</p><p>等等……可乐好像放错了。不过没关系，我们已经给每个状态拍了一张照，我们只需要找到放入可乐之前的状态，按照这个状态回溯到对应的时间点就可以了。</p><p>在Git中，利用 <code>checkout</code>可以将文件更改为某个指定的版本。就像刚刚拍照片一样，找到对应的文件版本，我们就可以进行操作了。</p><p>在SourceTree中的操作如下：</p><p>在左端的“History”选项卡，找到需要回溯的提交记录，双击后在弹出的确认对话框中点击“确定”即可。</p><blockquote><p>就算是移动到了过去的提交，最新的提交记录也还是存在的，使用的方法类似。</p></blockquote><blockquote><p>你可能注意到了，每一个提交都有一个对应的字符串，比如 <code>b57e271430990131a7c0dae4c7e14aaee4b804c0</code>。这是根据每一次提交生成的识别码，每一个提交都有一个独一无二的识别码。通过这串识别码，我们就可以辨别出来是哪个提交了。</p><p>为什么不用001，002这样的数字来作为识别码呢？如果在同一时刻两个人提交了操作，那么就没法分辨是谁修改的了。使用这样的40位识别码，就可以有效避免这个问题。</p></blockquote><h1 id="三、多人协作使用Git"><a href="#三、多人协作使用Git" class="headerlink" title="三、多人协作使用Git"></a>三、多人协作使用Git</h1><p>Git的一大优势就是在于它是分散式的分布管理系统。集中式的分布管理系统由操作者共同使用一个仓库，使用的时候必须联网。而分散式的分布管理系统中，对于一个仓库，每位开发者都可以在本地保存仓库内容，在适当的时刻提交到中央仓库就可以了。</p><p>分散式管理系统有以下优点：</p><ul><li>就算是离线状态，也可以正常工作</li><li>可以在不影响主仓库的条件下，自己修改代码调试</li><li>紧急情况下，可以很快从别人的仓库进行复原</li></ul><p>因此，Git更适合多人协作使用，在这一节中我们做较为详细的介绍。</p><h2 id="1-创建Github账号"><a href="#1-创建Github账号" class="headerlink" title="1.创建Github账号"></a>1.创建Github账号</h2><p>我们前面已经提到过，Github是常用的托管服务。在Github中，可以免费创建仓库用于代码托管。</p><p>打开<a href="https://github.com/">GitHub</a>，点击右上角的 <code>Sign Up</code>，按照指引进行注册。注册时需要准备一个可以使用的邮箱账号。</p><blockquote><p>最近Github强制开启了两步验证，可能还需要在手机上准备一个生成校验码的APP，这里推荐Microsoft Authenticator或Google Authenticator。</p></blockquote><blockquote><p>GitHub在国内访问较慢，如果上网姿势正确的话对访问会有帮助。</p></blockquote><h2 id="2-复制仓库"><a href="#2-复制仓库" class="headerlink" title="2.复制仓库"></a>2.复制仓库</h2><p>为了方便使用，我们把仓库先进行<strong>复制（Fork）</strong>，复制到自己的账号内，然后再进行<strong>克隆（Clone）</strong> 操作，将仓库下载到本地。</p><h3 id="复制的步骤"><a href="#复制的步骤" class="headerlink" title="复制的步骤"></a>复制的步骤</h3><p>打开一个仓库（在这本书中以<a href="https://github.com/elmas3/mao-seminar">这个仓库</a>作为例子），点开后点击右上角的“Fork”，然后在新页面中点击“Create Fork”，等待几秒钟后便可复制完成。如果你成功复制了仓库，那么仓库名最开始的部分会变成你的Github用户名。</p><h3 id="SourceTree中，克隆的步骤"><a href="#SourceTree中，克隆的步骤" class="headerlink" title="SourceTree中，克隆的步骤"></a>SourceTree中，克隆的步骤</h3><p>先在仓库页面，点击“Clone or download”，复制显示出来的网址。然后回到SourceTree，点击文件-克隆&#x2F;新建，在“源路径&#x2F;URL”一栏中填入刚刚得到的网址，最后点击“克隆”即可。</p><h2 id="3-创建分支"><a href="#3-创建分支" class="headerlink" title="3.创建分支"></a>3.创建分支</h2><p>在Git的官方解释中，<strong>分支</strong>的本质是指向提交对象的可变指针。</p><p>为了方便理解，对于分支做一些形象的说明。假设我们现在要做一份寿司，那我们可以把这个过程分成两条线，一条是准备寿司用的米饭，一条是准备做寿司用的生鱼片，准备两种原料的过程是互不冲突的，这就是分支的理念。通过分支，可以很方便地进行并行工作，同时也不会相互干扰。</p><p>那什么是指针呢？指针，简单而言，就是指向“当前”。比如在准备米饭的分支里，是这样的结构：</p><p>开始——禾苗——稻穗——米饭</p><p>那么指针就指向的是当前这个分支下最新的节点。在上面的例子中，指针指向的是“米饭”。</p><h3 id="确认目前所在的分支"><a href="#确认目前所在的分支" class="headerlink" title="确认目前所在的分支"></a>确认目前所在的分支</h3><p>在SourceTree中，目前所在的分支，会在左侧的“分支”选项卡下以黑色的粗体标出。</p><blockquote><p>在Github中，创建仓库时会自动创立一个名字叫 <code>main</code>的默认分支，就像是河流的干流。在早些创建的仓库上，默认分支名字是 <code>master</code>。</p></blockquote><h3 id="分支的移动"><a href="#分支的移动" class="headerlink" title="分支的移动"></a>分支的移动</h3><p>利用 <code>checkout</code>命令，也可以进行<strong>分支的移动</strong>。比如，我们现在处于米分支，那么我们就可以通过 <code>checkout</code>，移动到鱼分支来对其进行操作。不仅如此，利用 <code>checkout</code>，还可以移动到分支下任意的一次提交。在SourceTree中，想要移动分支，只需要在左侧的“分支”选项卡下，双击需要移动到的分支即可。</p><h3 id="创立分支并提交"><a href="#创立分支并提交" class="headerlink" title="创立分支并提交"></a>创立分支并提交</h3><p>在SourceTree上的操作步骤如下：</p><p>点击顶部菜单栏下方的“分支”，在“新分支”选项卡下输入分支的名字，点击“创建分支”按钮。</p><p><img src="https://images.shojola.top/Create_branch_d41d8cd98f00b204e9800998ecf8427e.png" alt="https://images.shojola.top/Create_branch_d41d8cd98f00b204e9800998ecf8427e.png"></p><p>创建好并修改代码后，进行暂存和提交操作，即可完成对对应分支下的提交。</p><h2 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4.合并分支"></a>4.合并分支</h2><p>我们已经创建了一个分支，当我们想把当前分支的更改合并（merge）到主分支里，又需要怎么做呢？</p><p>还是以寿司的例子讲解，我们现在已经准备好了米饭和鱼肉，现在我们打算把两个合并起来，做成寿司。我们需要先移动到米分支上，再读取鱼分支进行合并。简单来说，合并分支的操作就是：</p><p>1.切换到主分支；</p><p>2.读取需要合并的分支，进行操作。</p><p>在SourceTree中，合并分支的步骤如下：</p><p>1.双击 <code>main</code>（或 <code>master</code>）分支，切换到主分支；</p><p>2.右键需要合并的分支，点击“合并 <code>xxx</code>分支至当前分支（<code>xxx</code>是你需要合并的分支的名字）”，等待片刻后即可合并完毕。</p><blockquote><p>什么时候需要合并分支呢？比如说，bug修复的分支已经完成了自己的任务，那么就可以把bug修复后的代码合并到主分支上。添加新功能时，也可以这样合并到主分支上。</p></blockquote><h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><p>在合并的时候有这样一种情况，当同一行代码在同一时间被不同的人修改时，Git这个时候就不知道应该合并哪个代码，这样的情况就叫“冲突”。</p><p>在SourceTree中，如果遇到冲突，提交的时候会遇到这样的提示：</p><p><img src="https://images.shojola.top/Conflict_d41d8cd98f00b204e9800998ecf8427e.png" alt="https://images.shojola.top/Conflict_d41d8cd98f00b204e9800998ecf8427e.png"></p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>对于出现冲突的文件，SourceTree会对应地用感叹号标出来：</p><p><img src="https://images.shojola.top/Conflict_Warning_d41d8cd98f00b204e9800998ecf8427e.png" alt="https://images.shojola.top/Conflict_Warning_d41d8cd98f00b204e9800998ecf8427e.png"></p><p>打开对应的文件，可以看到Git已经标注出来了对应的冲突点：</p><p><img src="https://images.shojola.top/Conflict_in_File_d41d8cd98f00b204e9800998ecf8427e.png" alt="https://images.shojola.top/Conflict_in_File_d41d8cd98f00b204e9800998ecf8427e.png"></p><p>修改冲突的地方后，再次进行暂存和提交即可。</p><blockquote><p>修改冲突后进行提交，SourceTree会自动生成解决冲突的提交注释，当然也可以根据需要自己修改提交注释。</p></blockquote><h2 id="5-推送"><a href="#5-推送" class="headerlink" title="5.推送"></a>5.推送</h2><p>刚刚我们对分支的操作，都还在本地上，我们需要通过推送（push），来把代码推送到远程仓库。还记得在第二节我们复制了一个仓库吗？这个就是我们要推送代码过去的目标仓库。</p><p>在SourceTree中，想要推送代码的话，点击上方的“推送”按钮，在需要推送的分支前勾选“是否推送”的复选框，点击“推送”按钮即可。</p><blockquote><p>推送过程中可能会弹出Github的登录窗口要求验证。</p></blockquote><h2 id="6-拉取"><a href="#6-拉取" class="headerlink" title="6.拉取"></a>6.拉取</h2><p>多人协作中，往往会出现我们需要获取其他编辑者的更改的情况，这个时候就需要用到<strong>拉取（pull）</strong>。</p><p>假设他人已经提交了代码，但是我们还没有同步，那么在SourceTree中的操作如下：</p><p>点击最上方的“拉取”，在“要拉取的远端分支”一栏，确认拉取的分支是从主分支到主分支，核对好后点击“确定”，稍等片刻拉取就完毕了。检查提交记录，应该也可以看到对应的更改了。</p><h2 id="7-拉取请求与合并"><a href="#7-拉取请求与合并" class="headerlink" title="7.拉取请求与合并"></a>7.拉取请求与合并</h2><p>假设我们已经修改好了代码，想要把更改上传到主仓库，这时就需要用到<strong>拉取请求（pull requests）</strong>。</p><blockquote><p>明明是我们推送代码，为什么要写成是“拉取请求”而不是“推送请求”呢？其实这个说法是从对方的角度来说的，从对方来看，我们的需求是需要主仓库从我们的仓库“拉取”代码，因此是“‘拉取’请求”。</p></blockquote><blockquote><p>为什么我们不能直接把代码上传上去，还需要得到“允许”才可以呢？如果没有审核环节的话，上传的代码得不到检查，就很容易产生漏洞，或者是功能上的不匹配。而经过负责人的检查后，代码确保没有问题才会被合并，这样更不容易出问题。</p></blockquote><p>简单来说，拉取请求与合并的步骤如下：</p><p>复刻-&gt;克隆-&gt;创建自己进行操作的分支，提交-&gt;推送-&gt;Github上生成拉取请求-&gt;被合并。</p><p>在SourceTree中的操作步骤如下：</p><p>1.按照我们之前的步骤，复制仓库，创建分支，编辑文件，然后进行提交和推送。</p><p>2.打开浏览器，来到我们复制的仓库主页。点击仓库名下的“branches”，弹出的页面会显示目前仓库下的所有分支。</p><p>3.在“Active branches”下找到想要进行拉取请求的分支，点击右边的“New pull requests”，确认需要合并的分支正确后，填写说明点击“Create pull request”提交请求。</p><p>这是提交拉取请求的步骤。如果是仓库管理者，需要进入“Pull request”选项卡查看拉取请求。确认无误后，点击“Merge pull request”即可完成合并。</p><blockquote><p>当然，提交的请求也可能会被驳回。这个时候只需要在同一个分支上，按照注释修改代码，再提交和推送，就可以简单地更新拉取请求的内容了。</p></blockquote><h2 id="8-忽略无须进行版本管理的文件"><a href="#8-忽略无须进行版本管理的文件" class="headerlink" title="8.忽略无须进行版本管理的文件"></a>8.忽略无须进行版本管理的文件</h2><p>在Git仓库中，有些文件是不需要进行版本管理的，比如系统自动生成的文件，缓存或者容量过大的文件等。在Git中，可以通过在仓库内建立名叫 <code>.gitignore</code>的文件，指定不需要版本管理的文件。</p><p><code>.gitignore</code>文件的书写规则如下：</p><ul><li><p>备注：在这一行的开头加 <code>#</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 这是一条备注，它大概有这么长</span><br></pre></td></tr></table></figure></li><li><p>忽略特定文件，输入对应的文件名即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忽略名叫filename.txt的文件</span><br><span class="line">filename.txt</span><br></pre></td></tr></table></figure></li><li><p>忽略特定扩展名的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忽略扩展名为txt的文件</span><br><span class="line">*.txt</span><br></pre></td></tr></table></figure></li><li><p>不忽略某个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 不忽略filename.txt</span><br><span class="line">!filename.txt</span><br></pre></td></tr></table></figure></li><li><p>忽略特定目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忽略folder文件夹下的所有文件，对于仓库内所有叫folder的文件夹都有效</span><br><span class="line">folder/</span><br></pre></td></tr></table></figure></li><li><p>忽略根目录下的子目录内的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忽略根目录的folder子目录下的所有文件，仅对根目录符合要求的文件夹有效</span><br><span class="line">/folder/</span><br></pre></td></tr></table></figure></li></ul><p>更多的 <code>.gitignore</code>编写规则，可参考<a href="https://github.com/github/gitignore">这个网站</a>。</p><p>在SourceTree中，向 <code>.gitignore</code>写入忽略规则的步骤如下：</p><p>（1）点击右上角的设置，在“仓库设置”对话框中点击“高级”选项卡，再点击“仓库指定忽略列表”中的“编辑”选项卡；</p><p>（2）弹出编辑界面，按照上述规则按需配置；</p><p>（3）保存，暂存并提交。</p><p>如果想要忽略已经提交的文件，在SourceTree中需要以下操作：</p><p>（1）在“文件状态”选项卡中，点击右侧上方的下拉选项卡，选择“所有文件”；</p><p>（2）在“未暂存文件”一栏中，选择想要停止追踪的文件，右键点击“停止追踪”；</p><p>（3）提交此次更改，随后向 <code>.gitignore</code>中写入忽略信息，再次提交。</p><h2 id="9-如何高效使用分支"><a href="#9-如何高效使用分支" class="headerlink" title="9.如何高效使用分支"></a>9.如何高效使用分支</h2><p>我们可以通过分支创建不同的工作流程，而正因如此，如何高效使用分支成为了一个课题。在这里介绍一种推荐的使用规则——<strong>GitHub Flow</strong>。你可以点击<a href="https://https//docs.github.com/en/get-started/quickstart/github-flow">这里</a>来了解相关的信息。</p><p>对于GitHub Flow，它的分支模型可以分为两部分：</p><p>（1）main分支：此分支上的代码需要保持随时可发布的状态，原则上不在此进行操作；</p><p>（2）topic分支：用于对项目的开发，比如增加新功能，修复程序错误等。开发完毕后，再向main分支发送拉取请求进行合并。topic分支的名字最好直观易懂。</p><p>GitHub Flow的使用规则如下：</p><p>（1）main分支必须任何时刻都可以公开发布；</p><p>（2）需要进行新功能开发时，需要新建分支，分支名字可以直接反映新功能；</p><p>（3）定期推送分支；</p><p>（4）如果想要获得反馈建议，或者已经开发完毕需要合并到主分支，就发送拉取请求；</p><p>（5）合并的代码必须经过审计后通过；</p><p>（6）合并分支后，可以直接发布。</p><p>遵守上述规则，只需要浏览分支就可以知道目前在进行什么开发了。而代码经过审计，也可以保证代码的质量和稳定性。</p><h1 id="四、实用Git-这些时候，该怎么办呢？"><a href="#四、实用Git-这些时候，该怎么办呢？" class="headerlink" title="四、实用Git~这些时候，该怎么办呢？"></a>四、实用Git~这些时候，该怎么办呢？</h1><h2 id="1-回到过去，创建新分支，修改内容"><a href="#1-回到过去，创建新分支，修改内容" class="headerlink" title="1.回到过去，创建新分支，修改内容"></a>1.回到过去，创建新分支，修改内容</h2><p>依旧是设想一下做什锦烧的场景。我们已经现在有了三个时间点（提交）：</p><p>（1）放入水，鸡蛋，什锦烧粉；</p><p>（2）放入卷心菜；</p><p>（3）放入鸡肉。</p><p>如果我们想要另外做一份猪肉什锦烧，就需要回到放入卷心菜这一步，更改配料进行制作。用Git的语言表述这个过程，就是想要从过去的某一次提交开始，新建分支进行开发。这时候应该怎么操作呢？我们只需要先移动到需要对应时间点的提交，然后从这里新建分支即可。</p><p>在SourceTree中的操作如下：</p><p>1.左侧点击“History”选项卡，双击想要返回到的提交，在弹出的对话框选择确定；</p><p>2.点击最上面的“分支”选项卡，在“新分支”选项卡下，填写新分支信息，创建分支；</p><p>3.创建完毕。在此状态下提交，就可以实现需要的效果了。</p><h2 id="2-撤销过去的提交（revert）"><a href="#2-撤销过去的提交（revert）" class="headerlink" title="2.撤销过去的提交（revert）"></a>2.撤销过去的提交（<code>revert</code>）</h2><p>假设我们现在有这样一条提交记录：</p><p>A-B-C-D（D为最新提交）</p><p>那么是否可以撤销一个过去时间的提交（比如提交B）呢？这时候就需要用到<code>revert</code>。<code>revert</code>撤销的原理并不是简单粗暴地删除这次提交，而是通过<strong>提交一次与这次提交完全相反的内容</strong>来实现撤销更改的效果。</p><p>在SourceTree中，想要进行<code>revert</code>，只需要右键点击对应的提交，选择“回滚提交”即可。</p><blockquote><p>当变更的内容与指定的内容在同一行时会产生冲突，使用前面介绍的方法解决冲突即可。</p></blockquote><h2 id="3-提交历史合并为一条直线（rebase）"><a href="#3-提交历史合并为一条直线（rebase）" class="headerlink" title="3.提交历史合并为一条直线（rebase）"></a>3.提交历史合并为一条直线（<code>rebase</code>）</h2><p><em>本节使用的图片来自<a href="https://zhuanlan.zhihu.com/p/493953965">知乎</a>，你可以点击前面的蓝色字体进行访问。图片版权归原作者所有。</em></p><p>我们前面已经介绍了用<code>merge</code>合并分支。思考这样的分支：</p><p><img src="https://pic3.zhimg.com/80/v2-eaa162ec19fc38ce12a8c325e215ab82_1440w.webp"></p><p>对于两条分支，如果用<code>merge</code>进行合并，那么合并后会变成这样的结构：</p><p><img src="https://pic2.zhimg.com/80/v2-868e7257717ad13e88c6331812654391_1440w.webp"></p><p>可以看出来，使用<code>merge</code>合并，提交的历史记录依然保持在原先的分流状态。在这里我们介绍一种新的合并方式：<code>rebase</code>。如果使用<code>rebase</code>来进行合并，那么就会变成这样：</p><p><img src="https://pic4.zhimg.com/80/v2-5a6f9229899e97bd0ca9293faf299a3b_1440w.webp"></p><p>容易看出，<code>rebase</code>把之前的提交记录重新整理为了一条直线。在一些情况下，利用<code>rebase</code>进行操作，可以使提交记录更为清晰易懂。</p><blockquote><p><code>rebase</code>修改的只是提交记录。也就是说，对于同一个合并操作，使用两种方法合并后的代码是一致的。</p></blockquote><p>但是，使用<code>rebase</code>也要小心，因为<code>rebase</code>会把所有的历史提交重新生成新的提交，在这之中提交的id值也会改变。如果把远程仓库已有的分支进行<code>rebase</code>，那么如果有的使用者想要提交新的代码，就会遇到很大的麻烦（因为提交记录不匹配）。所以，在熟练掌握<code>rebase</code>前，尽量先使用<code>merge</code>进行合并操作。</p><p>在Sourcetree中，想要进行<code>rebase</code>，只需要先双击移动要进行<code>rebase</code>的分支，然后在需要<code>rebase</code>的目标分支上，右键选择“将当前变更变基到<code>xxx</code>”即可（<code>xxx</code>是目标分支的分支名）。</p><p>如果在<code>rebase</code>的过程中发生冲突，先点击上方菜单栏中的“操作”按钮，选择“解决冲突”。按照之前介绍的方法解决冲突后，再选择“继续变基”，即可完成<code>rebase</code>的操作。</p><h2 id="4-合并多个提交（squash）"><a href="#4-合并多个提交（squash）" class="headerlink" title="4.合并多个提交（squash）"></a>4.合并多个提交（<code>squash</code>）</h2><p>当对一个地方修改很多次后，提交历史会变得比较繁琐，如果能把对这一个地方的提交合并在一起进行记录，就会变得简洁很多了。这个时候就可以用到<code>squash</code>。</p><p><strong>要注意的是，由于<code>squash</code>的操作会改变提交记录，所以必须确认需要合并的提交记录只在本地。合并已经在远程仓库的提交记录容易造成混乱。</strong></p><blockquote><p><code>squash</code>有“压缩，挤压”的意思，这样想可以方便理解一些。</p></blockquote><p>在Sourcetree中的操作方法如下：</p><p>1.先确认需要合并的多个提交记录，找到在这群提交记录之前离得最近的一个提交记录，右键选择“交互式变基<code>commit id</code>的子提交”（<code>commit id</code>是进行右键操作的对应提交的id）；</p><p>2.在弹出窗口勾选想要进行合并的提交，点击“用此前的squash”按钮，然后点击“编辑信息”按钮，修改提交注释，全部完成后，点击“确定”进行提交，合并完成。</p><blockquote><p>如果编辑过程中出现混乱，可以点击“重置”按钮从头开始操作。</p></blockquote><p><code>squash</code>中解决冲突的操作与<code>rebase</code>相同，这里不再赘述。</p><h2 id="5-拉取是怎么实现的？-获取远程仓库的最新状态（fetch）"><a href="#5-拉取是怎么实现的？-获取远程仓库的最新状态（fetch）" class="headerlink" title="5.拉取是怎么实现的？ 获取远程仓库的最新状态（fetch）"></a>5.拉取是怎么实现的？ 获取远程仓库的最新状态（<code>fetch</code>）</h2><p>我们前面已经介绍了通过拉取功能来同步本地仓库与远程仓库的提交，现在我们来详细解释一下这个过程。</p><p>到目前为止，我们认为的拉取操作是这样的：</p><p>远程分支-&gt;本地分支</p><p>但其实这个过程是这样的：</p><p>远程分支-&gt;远程跟踪分支-&gt;本地分支</p><p>我们注意到，中间其实是有一个叫做“远程本地分支”的本地仓库充当“中介”的角色。远程跟踪分支是远程分支在本地的镜像，它是处于只读状态的。</p><p>我们把“远程分支-&gt;远程跟踪分支”的这个过程叫做<code>fetch</code>。由此我们可以得出，拉取（<code>pull</code>）的实现，其实是同步（<code>fetch</code>）与合并（<code>merge</code>）两个过程的结合。</p><p>如果再详细介绍一下上述过程，那么就应该是这样的：</p><p>在一般情况下，三个仓库的进度是相同的。现在，远程仓库多出了一个提交记录，那么Git会先把这个提交记录同步到远程跟踪分支上，也就是<code>fetch</code>。这个时候，远程的提交记录暂时还没有合并到我们的本地仓库上，我们目前只是知道了远程仓库多出来了一条这样的提交。如果我们确认要把这个提交合并到本地仓库，那么再使用<code>merge</code>。如果是拉取的话，那么两个过程就是先后同时进行的。</p><p>简单来说，拉取的命令并不是简单地把提交直接同步到本地仓库上，而是先把提交同步到一个跟踪远程分支的本地仓库里，再把提交同步到我们本地的工作仓库上。如果我们只是想要查看远程代码的开发进度，而暂时不想进行合并，那么就可以使用<code>fetch</code>命令进行操作。</p><p>想要在Sourcetree中使用<code>fetch</code>，只需要点击上方的“获取”按钮，再点击“确定”即可。如果想要进行合并，只需要在最新的提交上右键，点击“合并”即可。</p><h2 id="6-删除不需要的远程分支"><a href="#6-删除不需要的远程分支" class="headerlink" title="6.删除不需要的远程分支"></a>6.删除不需要的远程分支</h2><p>对于已经合并的分支，可以直接删除，提高使用效率。</p><blockquote><p><strong>一定要认真考虑整个团队的开发进度和运营方式后再决定是否要删除分支！</strong></p></blockquote><p>在Sourcetree中，想要删除分支的步骤如下：</p><p>（1）打开左侧菜单栏的“远程”选项卡，点开“origin”，在其下方找到需要删除的分支，点击删除“origin&#x2F;分支名”，在弹出后的提示框确认，此时完成了远程跟踪分支下的分支删除。推送之后，远程仓库的分支也会被删除。</p><p>（2）在左侧的“分支”选项卡下，进行同样的操作。此时完成对本地仓库的分支删除。</p><p>如果其他成员在远程仓库删除了分支，我们也想删除对应的分支时，需要先点击“获取”，在新的对话框中取消勾选“删掉所有远端现已不存在的跟踪分支（tracking）“，然后点击确定，先将更改反映到远程跟踪分支上。此后再按照前面的介绍，删除本地的对应分支就可以了。</p><blockquote><p><strong>如果直接右击“远端”选项卡下的“origin”，然后再点击“删除origin”，这样会直接删除掉整个远程仓库！除非你知道你在干什么，否则一定不要这样做！</strong></p></blockquote><h2 id="7-修改最近的提交注释（amend）"><a href="#7-修改最近的提交注释（amend）" class="headerlink" title="7.修改最近的提交注释（amend）"></a>7.修改最近的提交注释（<code>amend</code>）</h2><p>如果注释中出现错误已经提交，但是<strong>还没有推送到远程仓库</strong>的时候，可以进行修改。<strong>修改仅限于最近的一次提交。</strong></p><p>在Sourcetree中的修改方法如下：</p><p>在编写注释信息的文本框上方，点击“提交选项”的下拉框，选择“修改最后一次提交”，弹出对话框确认，修改之后再提交即可。</p><h2 id="8-暂存未提交的内容（stash）"><a href="#8-暂存未提交的内容（stash）" class="headerlink" title="8.暂存未提交的内容（stash）"></a>8.暂存未提交的内容（<code>stash</code>）</h2><p>如果正在编辑某个内容，而此时又需要放下现在的工作去修复另外的问题，这个时候就可以用<code>stash</code>，将现在的工作内容暂存起来，等到之后再取出来继续工作。</p><p>在Sourcetree中，想要进行<code>stash</code>，只需要先在提交记录中选择“未提交的更改”，在弹出的对话框中取好名字，确认即可。想要恢复的话，需要点击左侧的“贮藏”按钮，右键下方刚刚贮藏的内容，点击“应用贮藏区……”，确认即可。</p><h2 id="9-从其他分支上获取特定提交（cherry-pick）"><a href="#9-从其他分支上获取特定提交（cherry-pick）" class="headerlink" title="9.从其他分支上获取特定提交（cherry-pick）"></a>9.从其他分支上获取特定提交（<code>cherry-pick</code>）</h2><p>如果在进行提交时搞错了分支，这个时候可以使用<code>cherry-pick</code>解决。它可以把任意的提交复制到当前分支。</p><blockquote><p>“cherry-pick”是一句英文俚语，意思是“只挑熟的樱桃摘取”。考虑一个这样的分支：</p><p><code>main</code>: A-B-D-E</p><p><code>vice</code>: A-C</p><p>利用<code>cherry-pick</code>，可以把主分支的提交E移动到<code>vice</code>分支上，也就是变成这样：</p><p><code>vice</code>: A-C-E’</p><p>要特别指出的是，<code>cherry-pick</code>的作用只是“复制”而不是“移动”，原提交依然在对应分支上。</p></blockquote><p>在Sourcetree上，进行<code>cherry-pick</code>，只需要先移动到想要进行新增提交的分支，然后右键想要获取的提交，选择“遴选”，在弹出的确认框中确认即可。</p><h2 id="10-错误地把HEAD直接指向了某次提交"><a href="#10-错误地把HEAD直接指向了某次提交" class="headerlink" title="10.错误地把HEAD直接指向了某次提交"></a>10.错误地把HEAD直接指向了某次提交</h2><p>我们先来解释一下什么是<code>HEAD</code>。在Git中，<code>HEAD</code>是一个指针，它指向主分支的最新提交。但是有的时候，因为一些原因，我们可能会移动到了某次提交，这个时候HEAD就指向了某一次提交，HEAD就和主分支分离开了，这就是<code>detached head</code>。在这种情况下，我们可以进行提交，但是此时的提交是不属于任何分支的（因为这次的提交已经和主分支分离开了，并不会保存到主分支上），如果我们再次移动到主分支，这些提交就会丢失。</p><p>对于<code>detached head</code>状态，想要解决也很简单，在刚刚的提交的基础上创建一个新分支就好了。当然，因为这种状态下，提交不会被保存，所以也可以在这种状态下进行一些实验性操作。</p><h2 id="11-在Github-Pages上发布网页"><a href="#11-在Github-Pages上发布网页" class="headerlink" title="11.在Github Pages上发布网页"></a>11.在Github Pages上发布网页</h2><p>在Github上，如果仓库放的是网页源文件，可以很方便地通过Github进行网页的发布，并且不需要服务器。操作的步骤如下：</p><p>（1）打开需要发布的仓库的页面，点击上方的<code>Settings</code>；</p><p>（2）在左侧选择<code>Pages</code>，随后<code>Source</code>选择<code>Deploy from a branch</code>，下方的<code>Branch</code>选择想要发布页面的分支，然后点击<code>Save</code>；</p><p>（3）输入网址（<a href="https://username.github.io/repository%EF%BC%8C%E5%85%B6%E4%B8%AD%60username%60%E6%98%AF%E7%94%A8%E6%88%B7%E7%9A%84Github%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%8C%60repository%60%E6%98%AF%E5%8F%91%E5%B8%83%E7%BD%91%E7%AB%99%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D%E5%AD%97%EF%BC%89%EF%BC%8C%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E3%80%82">https://username.github.io/repository，其中`username`是用户的Github用户名，`repository`是发布网站的仓库名字），即可访问。</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《跟Wakaba酱一起学网站制作》笔记</title>
      <link href="/2023/09/01/Study-With-Wakaba/"/>
      <url>/2023/09/01/Study-With-Wakaba/</url>
      
        <content type="html"><![CDATA[<h1 id="一、策划"><a href="#一、策划" class="headerlink" title="一、策划"></a>一、策划</h1><h2 id="1-明确网站制作的目的"><a href="#1-明确网站制作的目的" class="headerlink" title="1.明确网站制作的目的"></a>1.明确网站制作的目的</h2><p><strong>制作网站并不是目的，而是达成目的的一种手段。</strong><br>如果用售卖巧克力来举例子，不仅可以通过制作网站介绍产品，也可通过在社交媒体宣传或投放广告的方式进行。有了目的再制作网站，效果就会好不少。</p><h2 id="2-明确目标用户"><a href="#2-明确目标用户" class="headerlink" title="2.明确目标用户"></a>2.明确目标用户</h2><p><strong>也就是说，此网站为谁设计，提供什么。</strong><br><strong>可以从“6W1H”的角度进行思考。</strong><br>在思考时，要注意目标用户的描述不能过于模糊。比如对象是“20岁的女性”的描述就过于泛化，应该再多想一些具体的特征，比如说对方的兴趣爱好，烦恼，性格等等。</p><h2 id="3-制作架构图"><a href="#3-制作架构图" class="headerlink" title="3.制作架构图"></a>3.制作架构图</h2><p>目标用户访问网站是为了寻找特定的信息或者体验内容，但网站如果没有合理的分类就麻烦了。所以我们需要架构图，来为用户提供合适的切入点，改善使用体验。<br>用超市来举例的话，如果我们通过商品类型进行规划，比如果蔬，肉类等，这样就更为直观，但是只用价格区间分类就没有那么直观了。<br>制作架构图时，可以先想一下这个网站的人的需求，再制作对应的切入点。举例来说，目标用户想要知道某个电影的演员，那么就可以从演员阵容作为切入点。<br><strong>特别注意，必须是要从访问者的视角多加考虑，提出的需求也必须具有代表性。</strong><br>其次还要确定顺序，主要是区分信息的优先级。</p><h2 id="4-制定计划"><a href="#4-制定计划" class="headerlink" title="4.制定计划"></a>4.制定计划</h2><p><strong>使用WBS（工作分解结构）来制定，可以使开发计划更加明朗。</strong><br>明确任务时并不能想到什么写什么，而是按照从上到下的顺序依次列举下来，以减少遗漏。<br><strong>Gantter（甘特图）是很好用的制作工具，可以利用Google Drive将其关联使用。</strong></p><h1 id="二、设计"><a href="#二、设计" class="headerlink" title="二、设计"></a>二、设计</h1><h2 id="1-先画线框图"><a href="#1-先画线框图" class="headerlink" title="1.先画线框图"></a>1.先画线框图</h2><p>其实也就是确定好网站的大体布局。<strong>线框图就是把网站的页面布局画下来的图，不考虑配色，装饰等UI设计问题，只是确定把什么元素放在什么位置上。</strong></p><blockquote><p>如果一开始就考虑视觉化的设计，那么很有可能会干扰想让用户真正看到的功能。所以，在制定线框图的时候，要以<strong>专注于网站目的</strong>为目标进行。</p></blockquote><p><strong>利用Mockplus，Sketch，Axure等工具，可以很方便地制作线框图。</strong></p><h2 id="2-用图片编辑软件进行设计"><a href="#2-用图片编辑软件进行设计" class="headerlink" title="2.用图片编辑软件进行设计"></a>2.用图片编辑软件进行设计</h2><p>设计的原则：<strong>简单易用，风格恰当</strong>。</p><h3 id="让网站简单易用的方法"><a href="#让网站简单易用的方法" class="headerlink" title="让网站简单易用的方法"></a>让网站简单易用的方法</h3><p><strong>（1）对元素进行适当分组，把相同的元素排布得更紧凑一些、，不同的元素间距放大一些；</strong><br><strong>（2）明确父子结构，建立清晰的逻辑关系；</strong><br><strong>（3）尊重主流的习惯，比如把返回键放在左边，前进键放在右边；</strong><br><strong>（4）设置导航栏，提供清晰的网页定位。</strong></p><h3 id="如何展现风格呢？"><a href="#如何展现风格呢？" class="headerlink" title="如何展现风格呢？"></a>如何展现风格呢？</h3><p>用饮料举例子来解释一下什么是风格。碳酸饮料的包装让人感到清爽，橙汁包装盒能让人感到充满汁水的水果，如果全部用相同的透明饮料瓶装着，就没有想让人喝一口或者购买的欲望了。不同的饮料包装让消费者产生对应的感觉，这就可以认为是一种“风格”。<br>基调与风格可以用以下两部确定：<br><strong>提炼商品的特征、列出想让用户拥有的印象。</strong></p><h1 id="三、HTML"><a href="#三、HTML" class="headerlink" title="三、HTML"></a>三、HTML</h1><h2 id="1-网页在互联网上可见的底层逻辑"><a href="#1-网页在互联网上可见的底层逻辑" class="headerlink" title="1.网页在互联网上可见的底层逻辑"></a>1.网页在互联网上可见的底层逻辑</h2><p><strong>大体可以概括为，设备先向网络寻找拥有所需数据的Web服务器，然后发送获取数据的请求，最后Web服务器再把对应的数据发回来，这样网页就显示出来了。</strong><br>Web服务器可以在任何地方，也许某一台服务器就在身边。</p><h2 id="2-HTML是什么？"><a href="#2-HTML是什么？" class="headerlink" title="2.HTML是什么？"></a>2.HTML是什么？</h2><p><strong>HTML，全名Hyper Text Markup Language，中文名超文本标记语言。在浏览器中右键点击“查看网页源代码”，就可以看到HTML的代码。</strong><br>HTML由 Tim Berners-Lee 和 Daniel W. Connolly 创立，起初是为了解决资料和人数太多难以寻找的问题。HTML可以便捷地整理信息，同时具有跳转功能，这样管理资料就方便很多了。</p><h3 id="HTML能做什么事呢？"><a href="#HTML能做什么事呢？" class="headerlink" title="HTML能做什么事呢？"></a>HTML能做什么事呢？</h3><p>（1）文章结构化。比如标题部分，我们可以用 <code>&lt;h1&gt;&lt;/h1&gt;</code>这样的标记区分，对于不同类型的内容做上标记，就可以把网页做出来了。<br><strong>但是，要注意标记要适当。HTML的目的就是向阅读文章的人和程序正确地传递文章内容。使用正确的标记，对于网页阅读和搜索引擎收录网页都很有好处。</strong></p><blockquote><p>如果我们知道HTML最初的作用是整理机构论文的话，理解这里会相对容易一些。</p></blockquote><p>（2）超链接。直观地说就是，点击链接就可以在网页之间灵活地跳转。<br><del>真的是很棒的功能！</del></p><h2 id="3-迎接HTML的准备工作"><a href="#3-迎接HTML的准备工作" class="headerlink" title="3.迎接HTML的准备工作"></a>3.迎接HTML的准备工作</h2><p><del>只要浏览器和记事本就行了，真的。</del><br>其实这句话并不假，我们只需要利用记事本编辑网页源代码，然后用浏览器查看效果就好了。<br>为了方便编辑，可以选用一些专为编程设计的编辑器，比如Atom和Visual Studio Code，浏览器可以选用Chrome，Microsoft Edge和Firefox等。</p><h2 id="4-HTML的基本结构"><a href="#4-HTML的基本结构" class="headerlink" title="4.HTML的基本结构"></a>4.HTML的基本结构</h2><p>以一个最简单的HTML文件举例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span> <span class="comment">&lt;!--声明这是一个HTML文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span> <span class="comment">&lt;!--制定HTML元素和语言。所有的元素都在HTML元素之内--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> <span class="comment">&lt;!--指定使用的字体编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="comment">&lt;!--显示在浏览器的标签或标题栏--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span> <span class="comment">&lt;!--head元素，记录页面标题与相关联的外部文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  文字和图片</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span> <span class="comment">&lt;!--body元素，包括网页内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在写HTML代码的时候，一定要注意使用正确的格式，养成换行和缩进的习惯。HTML的缩进使用两个空格比较合适。</strong></p><blockquote><p>你也许注意到了，在上面的代码中使用了类似 <code>&lt;!--内容--&gt;</code>这样的代码格式。这样的代码被称为<strong>注释</strong>，它不会显示在网页中，主要用来代码的可读性，使代码易于维护。<strong>在制作的过程中，合理使用注释很有必要。</strong><br><strong>在写注释的过程中，要特别注意连字符的个数。使用连字符过多，会使浏览器错误地判断注释代码的结束位置，导致显示效果异常。</strong></p></blockquote><h2 id="5-制作标题和段落"><a href="#5-制作标题和段落" class="headerlink" title="5.制作标题和段落"></a>5.制作标题和段落</h2><p>基本格式：<br><strong>标题：<code>&lt;h1&gt;大标题&lt;/h1&gt;</code><strong>，</strong>一共有 <code>&lt;h1&gt;</code>到 <code>&lt;h6&gt;</code>六种层次的标题格式。</strong><br><strong>段落：<code>&lt;p&gt;文章内容&lt;/p&gt;</code></strong><br><strong>换行：<code>&lt;br&gt;</code></strong></p><blockquote><p>h&#x3D;heading（标题），p&#x3D;paragraph（段落），br&#x3D;line break（换行）。</p></blockquote><h3 id="当效果不符合预期的时候……"><a href="#当效果不符合预期的时候……" class="headerlink" title="当效果不符合预期的时候……"></a>当效果不符合预期的时候……</h3><p>主要从<strong>是否错误使用了半角&#x2F;全角符号，是否是保存后再打开网页检查效果的，浏览器打开的和修改的是否是同一个文件</strong>三个角度检查。</p><h3 id="一行代码中各部分的名称"><a href="#一行代码中各部分的名称" class="headerlink" title="一行代码中各部分的名称"></a>一行代码中各部分的名称</h3><p>请看以下代码：<br><code>&lt;h1 class=&quot;ranking&quot;&gt;本周人气T恤&lt;/h1&gt;</code><br>（1）<strong>标签</strong>：<code>&lt;&gt;</code>括起来的部分；<br>（2）<strong>属性</strong>：为标签添加的附加信息，没有或者有很多个都可以。上面的 <code>class</code>就是属性；<br>（3）<strong>属性值</strong>：上面的 <code>&quot;ranking&quot;</code>部分；<br>（4）<strong>元素</strong>：标签和标签内的内容一起被称为元素。上面整行代码都是元素。<br>特别地，没有开始和结束标签的被称为<strong>空元素</strong>，比如 <code>&lt;br&gt;</code>。</p><h3 id="段落中使用文字样式"><a href="#段落中使用文字样式" class="headerlink" title="段落中使用文字样式"></a>段落中使用文字样式</h3><p>在HTML中，可以使用以下标签，给文字增加显示效果：</p><p><code>&lt;strong&gt;</code>：<strong>加粗</strong></p><p><code>&lt;b&gt;</code>： <strong>程度弱一点的加粗</strong></p><p><code>&lt;em&gt;</code>：<em>斜体</em></p><p><code>&lt;i&gt;</code>：<em>程度弱一点的斜体</em></p><p><code>&lt;sub&gt;</code>：<sub>下标</sub></p><p><code>&lt;sup&gt;</code>：<sup>上标</sup></p><p><code>&lt;del&gt;</code>：<del>删除线</del></p><p><code>&lt;ins&gt;</code>：<u>下划线</u></p><p><code>&lt;hr&gt;</code>：水平线</p><p>此外，还有一些特殊字符的表示方法：</p><p><code>&amp;nbsp</code>：空格</p><p><code>&amp;lt;</code>：小于号’&lt;’，用于纯文字输出</p><p><code>&amp;gt;</code>：大于号’&gt;’，用于纯文字输出</p><p><code>&amp;#114514#</code>：表情符号输出，不同的表情由后面的六位数字控制</p><p><code>&amp;copy</code>：版权标志’©’</p><h2 id="6-用列表制作导航栏"><a href="#6-用列表制作导航栏" class="headerlink" title="6.用列表制作导航栏"></a>6.用列表制作导航栏</h2><p>使用<strong>ul（unordered list）元素，ol(ordered list)元素和li（list）元素</strong>。<br>使用方法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;ul&gt;</code>和 <code>&lt;ol&gt;</code>的区别在于，显示标题的时候是否会加上顺序。<br>上面的代码，用ul元素是这样的效果：</p><ul>  <li>主页</li>  <li>关于</li></ul><p>用ol元素则是这样的：</p><ol>  <li>主页</li>  <li>关于</li></ol><p>而从上面的代码，我们能看出来，ul元素包着li元素，我们说两种元素之间包含着<strong>父子关系</strong>。从 <code>&lt;li&gt;</code>的角度看，<code>&lt;ul&gt;</code>是父元素，反过来以 <code>&lt;ul&gt;</code>的角度看，<code>&lt;li&gt;</code>是子元素。<br><strong>父子关系的思考方式在学习CSS时很有用。</strong></p><h2 id="7-添加超链接"><a href="#7-添加超链接" class="headerlink" title="7.添加超链接"></a>7.添加超链接</h2><p><strong>使用a（anchor）元素。</strong> 使用例如下：<br><code>&lt;a href=&quot;index.html&quot;&gt;TOP&lt;/a&gt; &lt;!--href后面表示网页的路径--&gt;</code></p><p>在同一页面中，也可以通过设置对应部分的id来实现页内不同部分的跳转。这种叫做锚点跳转。举一个例子：</p><p>页面的下半部分有这样的标题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>下半部分<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若想在页面的上半部分设置超链接，实现跳转到页面下半部分的功能，可以这么设计：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#a1&quot;</span>&gt;</span>跳转到下半部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果想实现不同页面之间的锚点跳转，则需要在<code>#</code>前增加目标网址。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com#a1&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--跳转到example.com中id为a1的部分--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><p><strong>相对路径以当前的位置为起点，说明目标文件的位置；绝对路径则是完整描述文件位置，不论在哪个网页都显示一致。</strong><br>举个例子，如果用两种方法描述一个人的住址，相对路径就是“这个公寓同一层的XXX”，绝对路径就是“中国XX省XX市XX区X街道X公寓的XXX”。<br><strong>使用相对路径，可以减小网站迁移时更改代码的工作量。</strong></p><h2 id="8-插入图片"><a href="#8-插入图片" class="headerlink" title="8.插入图片"></a>8.插入图片</h2><p><strong>使用img（image）元素。</strong> 请看下面的代码：<br><code>&lt;img src=&quot;图片地址&quot; alt=&quot;替代文本&quot;&gt;</code><br><strong>src属性指定图片的路径，相对绝对的都可以；alt属性则是指定在图片无法正常加载时显示的替代性文本。</strong></p><h2 id="9-划分区域"><a href="#9-划分区域" class="headerlink" title="9.划分区域"></a>9.划分区域</h2><p>划分区域对于后续的页面布局很有好处。一般来说，网页可以分为三个基本区域：<strong>header元素，main元素和footer元素</strong>。</p><h3 id="header元素"><a href="#header元素" class="headerlink" title="header元素"></a>header元素</h3><p><strong>主要负责定义网页的头部内容，具体包含网页的标题，商标，导航和搜索框。</strong> 使用例如下：<br><code>&lt;header&gt;头部内容&lt;/header&gt;</code></p><blockquote><p>注意和head元素区分开哦，两个不一样的。</p></blockquote><h3 id="main元素"><a href="#main元素" class="headerlink" title="main元素"></a>main元素</h3><p><strong>负责定义主内容的范围，一个页面只能使用一次。</strong> 使用例如下：<br><code>&lt;main&gt;主内容&lt;/main&gt;</code></p><h3 id="footer元素"><a href="#footer元素" class="headerlink" title="footer元素"></a>footer元素</h3><p><strong>顾名思义，就是定义页脚的部分。主要包括网站运营者的联系方式，版权声明和相关链接等。</strong> 使用例如下：<br><code>&lt;footer&gt;页脚部分&lt;/footer&gt;</code><br>除了这三个元素之外，还有一些其他的用来定义区域的元素：</p><h3 id="nav元素"><a href="#nav元素" class="headerlink" title="nav元素"></a>nav元素</h3><p><strong>主要定义导航栏的范围。</strong> 使用例如下：<br><code>&lt;nav&gt;导航栏&lt;/nav&gt;</code></p><h3 id="section元素"><a href="#section元素" class="headerlink" title="section元素"></a>section元素</h3><p><strong>用来定义大纲，也就是文件的层次结构，类似于一本书的章节和段落。被section元素包围表示这个范围写的内容与这个标题相关。</strong><br><strong>所以，section元素包围的部分必须得有标题。</strong></p><h3 id="article元素"><a href="#article元素" class="headerlink" title="article元素"></a>article元素</h3><p><strong>用于定义独立内容范围。被article元素包围的内容表示其独立于页面其他部分，像是商品介绍，公司简介以及单个的博客文章都比较适合使用。</strong></p><h3 id="div元素"><a href="#div元素" class="headerlink" title="div元素"></a>div元素</h3><p><strong>用于内容的模块化，表示内容属于一个组。</strong></p><h2 id="10-命名元素"><a href="#10-命名元素" class="headerlink" title="10.命名元素"></a>10.命名元素</h2><p>命名了元素后，CSS和JavaScript就能通过名字指定元素来美化网页了。我们使用<strong>id元素和class元素</strong>进行标记。<br><strong>id元素在同一网页中只能使用一次，class元素可以多次使用。</strong> 如果只是用来调整外观，那么一般使用class元素就可以了。</p><h2 id="11-制作表格"><a href="#11-制作表格" class="headerlink" title="11.制作表格"></a>11.制作表格</h2><p><strong>使用table元素。</strong></p><p><strong>先把想做的表格整体用 <code>&lt;table&gt;&lt;/table&gt;</code>包围起来，然后把标题用<code>&lt;caption&gt;</code>元素包围起来。</strong></p><p><strong>对于表格内容，把每一行用”<code>&lt;tr&gt;</code>包围起来，最后把单元格的部分用 <code>&lt;th&gt;</code>或 <code>&lt;td&gt;</code>一个个围起来。</strong></p><p>从单元格的内容来看，标题使用 <code>&lt;th&gt;</code>元素进行标记，数据使用 <code>&lt;td&gt;</code>进行标记。表格的排列方式为横向并列。 另外需要注意的是，默认的表格是没有边框的，使用 <code>&lt;table&gt;</code>时需要设置一下border属性才能显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span> <span class="comment">&lt;!--1表示边框粗细，单位为像素--&gt;</span></span><br></pre></td></tr></table></figure><p>除此之外，在表格中还可以使用以下的元素：</p><p><code>cellspacing</code>：规定单元格之间的空间；</p><p><code>width</code>：规定表格的宽度。除了作用于整个表格，此属性也可以单独用在每一列上。</p><p><code>height</code>：规定表格的高度。除了作用于整个表格，此属性也可以单独用在每一行上。</p><p><code>background</code>，<code>bgcolor</code>：设置背景&#x2F;颜色。可单独用于行和列上。</p><p><code>align</code>：设置表格文字的对齐方式。</p><p><code>colspan</code>，<code>rowspan</code>：跨行&#x2F;跨列元素，值为从当前格开始跨越的行数&#x2F;列数。与Excel中的“合并单元格”类似。</p><h2 id="12-表单的制作方法"><a href="#12-表单的制作方法" class="headerlink" title="12.表单的制作方法"></a>12.表单的制作方法</h2><p><strong>表单的自动发送功能仅靠HTML和CSS是无法实现的。在这里我们先介绍如何使用HTML写简单的表单框架。</strong> 表单使用form元素进行标记。<br>而在表单中，主要使用以下几种元素：<br><strong>name属性</strong>。 使用方法为 <code>name=&quot;example&quot;</code>。<br><strong>action属性</strong>。 指定数据发送地址的URL。使用方法为 <code>action=&quot;example.html&quot;</code>。<br><strong>method属性</strong>。 指定数据传送方式，使用方法与上面两种类似。<strong>分为get与post两种传输方式</strong>。<br>两种传输方式的区别请见下表。</p><table><thead><tr><th align="center">属性值</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">get</td><td align="center">把数据加载URL的后面进行传输，可以被第三方看到</td></tr><tr><td align="center">post</td><td align="center">传输数据不在浏览器上呈现，适用于传输邮箱，密码等保密信息</td></tr></tbody></table><p><strong>input属性</strong>。 用于单行输入。input元素中主要使用以下几种属性：</p><ul><li><p><strong>type属性</strong><br>指定输入数据的类型，使用方法参照name属性的指定方法。属性值主要有以下几种：</p><table><thead><tr><th align="center">属性值</th><th align="center">输入形式的类型</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">单行文本输入框</td></tr><tr><td align="center">password</td><td align="center">密码输入框，输入的信息会自动变为圆点显示</td></tr><tr><td align="center">checkbox</td><td align="center">复选框</td></tr><tr><td align="center">radio</td><td align="center">单选框</td></tr><tr><td align="center">submit</td><td align="center">发送按钮</td></tr><tr><td align="center">hidden</td><td align="center">隐藏的输入框</td></tr><tr><td align="center">email tel url</td><td align="center">电子邮箱，电话与网址。具有校验功能，如果输入格式不正确会进行提示</td></tr></tbody></table></li><li><p><strong>value属性</strong><br>对于不同的输入类型，value属性所指内容也不同。主要有以下几种：</p><table><thead><tr><th align="center">输入类型</th><th align="center">属性值所指内容</th></tr></thead><tbody><tr><td align="center">文本输入框</td><td align="center">输入框内的初始值</td></tr><tr><td align="center">复选框 单选按钮</td><td align="center">传输给服务器的值</td></tr><tr><td align="center">按钮</td><td align="center">按钮上的文字</td></tr></tbody></table></li><li><p><strong>name属性</strong><br>定义表单中每个输入框的名字，便于服务器正确匹配数据。</p></li><li><p><strong>placeholder属性</strong><br>指定文本框内的提示文字。</p></li><li><p><strong>checked属性</strong><br>此属性不具有属性值，用来预先选定复选框或单选按钮。</p></li><li><p><strong>readonly属性</strong><br>此属性不具有属性值，表示这里的文字不允许被修改。</p></li><li><p><strong>required属性</strong><br>定义必填项。若未完成必填项就点击发送键，数据不会被发送，并且网页会有相应提示。无属性值。</p></li></ul><p><strong>textarea元素</strong>。 用于多行输入。主要使用以下几种属性：</p><ul><li><strong>cols属性</strong><br>规定一行的文字数。</li><li><strong>rows属性</strong><br>规定文本输入框的行数。文本框高度也会随着规定的行数发生改变。</li><li><strong>required属性</strong><br>无属性值，定义必填项。</li></ul><blockquote><p>当用HTML设计网页时，我们需要思考文章的正确结构。由此就引出了类别与内容模型的概念。<br>现在举一个例子，水的类别是“液体”，水杯的类别是“容器”，内容模型是“液体”。我们很自然地可以想到，一般情况下都是杯子里盛水，而不是杯子浸泡在水里。<br>把这个关系用HTML表示出来就是这样：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">水杯</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">水</span>&gt;</span>放在杯子里的水<span class="tag">&lt;/<span class="name">水</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">水杯</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>把这种情况推广到HTML的表示方法中，就可以直观地理解这两个概念。</p></blockquote><h1 id="四、CSS"><a href="#四、CSS" class="headerlink" title="四、CSS"></a>四、CSS</h1><h2 id="1-什么是CSS？"><a href="#1-什么是CSS？" class="headerlink" title="1.什么是CSS？"></a>1.什么是CSS？</h2><p>CSS&#x3D;Cascading Style Sheets，即层叠样式表。如果说HTML是网页的基本结构，那么CSS的作用就是为网页锦上添花，使网页看起来更加生动。</p><p>在最早的一开始，HTML同时担任着结构和美化的任务。但是这样导致结构和美化的部分杂糅，使源代码很难读懂。于是CSS应运而生。本文以CSS3标准进行介绍。</p><h3 id="CSS的语法"><a href="#CSS的语法" class="headerlink" title="CSS的语法"></a>CSS的语法</h3><p><strong>首先，使用CSS是不需要声明的，它也不一定非得和HTML5绑定使用。</strong> 使用CSS的格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选择器 &#123;属性:值;&#125; */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure><p>这个格式代表把选择器指定的元素的指定属性改为指定的值。上方的代码表示把元素p的字体颜色改为红色。</p><blockquote><p>你也许注意到了，上方的代码使用 <code>/* */</code>这样的格式来进行注释。这是CSS中写注释的方式，和在HTML5中不太一样。</p></blockquote><h2 id="2-层叠"><a href="#2-层叠" class="headerlink" title="2.层叠"></a>2.层叠</h2><p>层叠就像是一层层连起来的瀑布，当一个元素上应用多种样式的时候，层叠可以安排样式的先后顺序，优化显示效果。</p><p>举个例子，我们要实现一个白底黑字的效果，那么HTML和CSS都是这么写的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Cascading<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt; &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black; <span class="comment">/* 背景色 白色 */</span></span><br><span class="line">  <span class="attribute">color</span>: white; <span class="comment">/* 文字颜色 白色 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: large; <span class="comment">/* 字号 大 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>也许你会疑惑，p元素中只指定了文字的大小，颜色真的会变白色吗？CSS中存在一个叫<strong>样式继承</strong>的机制，子元素会继承父元素的样式，这样我们就没必要对元素一个个设置了。</p></blockquote><blockquote><p>思考这样一个问题：如果在上述代码中，我们先指定p元素是白色，后指定p元素是黑色，结果会是什么样子？答案是黑色，因为CSS中，<strong>当选择器处于同一优先级的时候，后设置的样式优先</strong>。</p></blockquote><h2 id="3-CSS的引入方法"><a href="#3-CSS的引入方法" class="headerlink" title="3.CSS的引入方法"></a>3.CSS的引入方法</h2><p>一共有3种。分别是：</p><ul><li><strong>行内样式：直接写入标签内</strong></li><li><strong>内部样式：直接写入head元素中</strong></li><li><strong>外部样式：CSS文件附在外面</strong></li></ul><p>具体的样子如下：</p><p>行内样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--行内样式，使用style元素进行引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> <span class="attr">type</span>=<span class="string">&quot;color: red&quot;</span>;&gt;</span> Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这样子使用会导致网页源代码的结构混乱，请尽量避免使用这样的方法。</p></blockquote><p>内部样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内部样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  ······</span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red; </span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>相较于第一种方案，这一种在一定程度上实现了HTML和CSS的分离，但是如果使用的样式过多，依然会造成可维护性的下降。</p></blockquote><p>外部样式：</p><p>HTML 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--外部样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  ······</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/common.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，我们先额外创立了一个CSS文件，写入了我们需要的样式。在额外创立CSS文件时，<strong>一定要注意先使用 <code>@charset</code>来指定编码方式</strong>。随后，我们在HTML文件中引用了这个CSS文件。其中，<code>rel=&quot;stylesheet&quot;</code>指的是“附上于此处关联的样式表”，而 <code>href=&quot;css/common.css&quot;</code>指定了样式表的位置。</p><blockquote><p>为什么要尽量使用外部样式呢？思考这样一个问题：</p><p>假设你现在有一个网页，然后这个网页有50个HTML文件组成。现在我们想改掉同一个地方的样式，那么你需要：</p><p>A.行内&#x2F;内部样式，修改50个HTML文件；</p><p>B.外部样式，修改1个对应的CSS文件。</p><p>这样就体现出来外部样式的好处了。当需要修改的时候，我们可以减少修改量，便于维护网页。</p></blockquote><h2 id="4-尝试导入字体吧！"><a href="#4-尝试导入字体吧！" class="headerlink" title="4.尝试导入字体吧！"></a>4.尝试导入字体吧！</h2><p>一般情况下，浏览器只能显示进入用户终端的字体。而在线字体可以使用服务器上的字体文件，不受用户端的限制，显示相同的字体。</p><p>本节中，我们使用谷歌字体。谷歌字体的种类很全，并且使用简单，而完全免费。</p><p>（1）打开<a href="https://fonts.google.com/">谷歌字体</a>网站 <strong>（需要正确的上网姿势）</strong> ，在搜索框中需要你想要的字体。本节中我们以Montserrat字体为例。</p><p>（2）点开字体页面后往下滑，选择 <code>Select Regular 400</code>，在右侧的 <code>Use on the web</code>选项卡下，点击 <code>&lt;link&gt;</code>选项卡，复制 <code>&lt;link href...&gt;</code>开头的代码，放到 <code>head</code>元素内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--省略--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Montserrat:wght@100&amp;display=swap&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）在想要使用的元素中设定 <code>font-family</code>即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Montserrat&quot;</span>,sans-serif; <span class="comment">/* 字体设置 */</span></span><br><span class="line">        <span class="comment">/* 这句话表示，在这个元素中优先使用Montserrat字体，如果不能正常调用的话，就用sans-serif。 */</span></span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-改变文字的大小与颜色"><a href="#5-改变文字的大小与颜色" class="headerlink" title="5.改变文字的大小与颜色"></a>5.改变文字的大小与颜色</h2><p>请看以下的例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.price</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#C00</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们来解释一下代码的含义：</p><p>（1）控制字号的是 <code>font-size</code>属性，示例代码表示的是，将字号设置为原来的2倍。</p><p>在CSS中，要接触很多和大小有关的单位。具体的单位可以参见下表：</p><table><thead><tr><th align="center">单位</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">px</td><td align="center">字体的显示像素，具体大小为以设定值像素长为边的正方形</td><td align="center"><code>div &#123;width: 100px; &#125;  /* 宽度为100像素 */</code></td></tr><tr><td align="center">%</td><td align="center">相对于父元素初始值的百分比</td><td align="center"><code>div &#123;width: 80%; &#125;  /* 宽度为父元素的80% */</code></td></tr><tr><td align="center">em</td><td align="center">相对于页面原本的字号，这部分的放大倍数</td><td align="center">上部分的示例代码</td></tr></tbody></table><p>（2）<code>color</code>调整的是文字的颜色。填入后面的颜色可以使用以下的两种表示方法：</p><ul><li>16进制数，比如 <code>#1f1e33</code>。</li><li>10进制数，比如 <code>rgb(114,51,4)</code>。</li></ul><blockquote><p>在这里简单解释一下RGB颜色的表示法。显示器组成的颜色，是由红色，蓝色和绿色三原色组成的。因此我们可以通过指定三种颜色的浓度，来混合出不同的颜色。</p><p>对于三种颜色的浓度，取值范围在[0,255]，0到255从浅到深变化。十进制就是直接把三个值表示出来，十六进制就是先把每个值换算为十六进制的形式，再合并在一起表示。</p></blockquote><h2 id="6-选择器的特指度-CSS中还有优先级关系？"><a href="#6-选择器的特指度-CSS中还有优先级关系？" class="headerlink" title="6.选择器的特指度 CSS中还有优先级关系？"></a>6.选择器的特指度 CSS中还有优先级关系？</h2><p>我们在前面说到，CSS中是有优先级关系的。在这一节中，我们对这里进行更为深入的解释。</p><p>顾名思义，优先级就是面对不同样式时，优先使用高优先级的样式。接下来一一介绍各个选择器，为了方便描述，从有高到低的优先级介绍。</p><h3 id="（1）-important——强势国王！"><a href="#（1）-important——强势国王！" class="headerlink" title="（1）!important——强势国王！"></a>（1）!important——强势国王！</h3><p><code>!important</code>就和国王一样，拥有最高的优先级。<strong>但也正因如此，请尽量避免过多使用此选择器，以免在覆盖样式的时候出现大麻烦。</strong></p><p>使用的一个例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.price</span> &#123;<span class="attribute">color</span>: red <span class="meta">!important</span>;&#125;</span><br><span class="line"><span class="selector-class">.price</span> &#123;<span class="attribute">color</span>: blue;&#125;</span><br></pre></td></tr></table></figure><p>如果没有 <code>!important</code>，按照“先来后到”的原则，应该是蓝色的样式先使用。但是加了这个选择器后就发生了变化，红色的样式优先级最高，会被最优先地使用。</p><blockquote><p>可能有的同学不能理解，既然 <code>!important</code>下的样式可以被无条件使用，那么岂不是非常方便，为什么不能过多使用呢？</p><p>设想一下，如果一个王国内有好几个国王，那么国王之间同时下达指令，肯定会造成冲突和混乱。而且，能覆盖国王意见的也只有国王，如果我们想要这么做，只有另外造出来一个国王了，而这样子也肯定会产生大麻烦的。</p></blockquote><h3 id="（2）内联（行内）样式——内务大臣"><a href="#（2）内联（行内）样式——内务大臣" class="headerlink" title="（2）内联（行内）样式——内务大臣"></a>（2）内联（行内）样式——内务大臣</h3><p><strong>内联样式</strong>就是直接把样式设置写入HTML的 <code>style</code>属性中的一种方式。我们在前面已经介绍过了，为了方便修改，最好不要使用这种样式。</p><p>以下是内联样式的一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>2,980<span class="tag">&lt;/<span class="name">span</span>&gt;</span>日元（含税）</span><br></pre></td></tr></table></figure><h3 id="（3）id选择器——孤傲公主"><a href="#（3）id选择器——孤傲公主" class="headerlink" title="（3）id选择器——孤傲公主"></a>（3）id选择器——孤傲公主</h3><p>人（?）如其名，<strong>id选择器</strong>就和自尊心很强的公主一样，不允许城堡内再有同名的公主。也就是说，<strong>在一个页面内同名的id属性仅可使用一次。</strong></p><p>id选择器的标记是 <code>#</code>，在 <code>#</code>后标注目标元素的id属性。比如这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sale</span> &#123;<span class="attribute">color</span>:blue;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这里使用id选择器更改外观只是为了演示使用，实际使用应该尽量避免这种用法，避免样式覆盖带来麻烦。</p></blockquote><h3 id="（4）类选择器、属性选择器，伪类——三类将军"><a href="#（4）类选择器、属性选择器，伪类——三类将军" class="headerlink" title="（4）类选择器、属性选择器，伪类——三类将军"></a>（4）类选择器、属性选择器，伪类——三类将军</h3><p><strong>类选择器</strong>是通过 <code>class</code>属性来选择元素的选择器。类选择题的标记是 <code>.</code>，在这之后加需要修改的元素的 <code>class</code>属性值。比如这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.price</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p><strong>属性选择器</strong>是根据属性，以及对应属性中是否有特定内容来进行样式的修改。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* href的属性值中有&quot;Web&quot;元素的文字颜色设置为红色 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href*=<span class="string">&quot;web&quot;</span>]</span>&#123; <span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p><strong>伪类</strong>用来设定某个元素在特定条件下时的样式规则，比如在链接被点击前后时设置不同的颜色。使用例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>: hover &#123; <span class="attribute">color</span>: red;&#125; <span class="comment">/* 伪类的设定需要一个冒号 */</span></span><br><span class="line"><span class="comment">/* 光标放在链接上时，文字变为红色 */</span></span><br></pre></td></tr></table></figure><blockquote><p>伪类名字中虽然有“类”，但是和类选择器没关系哦。</p></blockquote><h3 id="（5）元素选择器、伪元素——二类士兵"><a href="#（5）元素选择器、伪元素——二类士兵" class="headerlink" title="（5）元素选择器、伪元素——二类士兵"></a>（5）元素选择器、伪元素——二类士兵</h3><p><strong>元素选择题</strong>就是通过元素的种类来设定样式规则的一种选择器。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123; <span class="attribute">color</span>:red; &#125;</span><br></pre></td></tr></table></figure><p><strong>伪元素</strong>用来修改HTML中没有被标记的内容的样式设置，比如改变某个元素第一个字的颜色。使用例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123; <span class="comment">/* 伪元素的设定需要两个冒号 */</span>  </span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;example&quot;</span>;</span><br><span class="line">&#125; <span class="comment">/* 在p元素对应的内容后添加字样 */</span></span><br></pre></td></tr></table></figure><h3 id="（6）通配选择器——万能女仆"><a href="#（6）通配选择器——万能女仆" class="headerlink" title="（6）通配选择器——万能女仆"></a>（6）通配选择器——万能女仆</h3><p><strong>通配选择器</strong>虽然优先级最低，但是可以影响整个页面的全部元素。<code>*</code>是使用通配选择器的标志。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123; <span class="comment">/* 重置默认留白 */</span></span><br><span class="line">    margain: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于每个浏览器都有一套默认的CSS样式规则，而且这些样式规则的属性值不完全相同，因此可以通过使用通配选择器，来将页面外观统一重置，这样做也被称为CSS重置。</p><p>不过，这样做虽然很方便，但是也有以下缺点：</p><ul><li>默认样式规则的好处没有了</li><li>被重置的部分还需要重新写入，时间成本增加，CSS也会臃肿</li></ul><p>所以，现在大家更多的还是“只重置需要的元素”，而不是一锅端。</p><h3 id="强度数值化"><a href="#强度数值化" class="headerlink" title="强度数值化"></a>强度数值化</h3><p>关于选择器的强度（优先级），也可以通过<strong>特指度</strong>来判断。我们前面用拟人化的形象来比喻各种选择器，在这里同样可以使用。</p><p>思考一下，如果有以下两个选择器：</p><ul><li><code>#id p</code></li><li><code>p.class::after</code></li></ul><p>哪一个选择器更强？</p><p>让我们来具体分析一下。如果用前面的知识表示，那么 <code>#id p</code>就是一位公主加一位士兵，而 <code>p.class::after</code>就是一位将军加一位士兵，而公主比士兵有更高的权力（也就是优先级），所以 <code>#id p</code>的优先级更高。</p><p>从上面的例子我们可以看出，<strong>通过特指度判断优先级的时候，按照“大臣，公主，将军，士兵”的顺序依次判断，先判断这一阶层的人数，人数多的直接胜出，如果这一阶层人数相同，则顺延到下一阶层进行判断，直至分出胜负为止。<code>!important</code>是最高优先级的（国王），不需要比较就可以无条件胜出。</strong></p><p>如果我们按照上面介绍的顺序，把每个阶层的人数标出来，那么上述两个选择器的强度可以表示为 <code>0.1.0.1</code>与 <code>0.0.1.2</code>。这就是特指度。同样地，<code>!important</code>没有优先级，可以无条件胜出。</p><blockquote><p>是不是已经晕了？没关系，你可以点击这里，用这个<a href="http://specificity.keegan.st/">网址</a>计算特指度。</p></blockquote><h2 id="7-内边距与外边距的区别"><a href="#7-内边距与外边距的区别" class="headerlink" title="7.内边距与外边距的区别"></a>7.内边距与外边距的区别</h2><p>在网页制作中，会有“在一定元素间设置空白”的需要，这时候就要用到 <code>padding</code>和 <code>margin</code>。两个都可以设置空白，但是两个的含义并不一样。前者是边内侧的空白（内边距），后者是边外侧的空白（外边距）。</p><p>是不是感觉理解起来有点费劲？我们用一个图表示一下：</p><p><img src="https://images.shojola.top/box_model_example_d41d8cd98f00b204e9800998ecf8427e.png" alt="https://images.shojola.top/box_model_example_d41d8cd98f00b204e9800998ecf8427e.png"></p><p>就像我们看到的，网页中的图像都是被这三层包围着，从内到外分别是 <code>padding</code>，<code>border</code>（<del>我图里面拼错了，请自动忽视</del>），<code>margin</code>。这三者总称为CSS的<strong>框模型（Box Model）</strong>。从观感来说，<code>padding</code>元素设置后画面会“变胖”，而 <code>margin</code>是扩大了“禁止入内的范围”。</p><p><code>padding</code>和 <code>margin</code>的设置方法有很多种：</p><ul><li><strong>上下左右统一设置</strong></li></ul><p>直接指定两个元素的值即可，单位可以参考这一章第5节的介绍。值可以单一设置，也可以同时设置多个值，规则如下：</p><table><thead><tr><th align="center">代码</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>padding: 10px;</code></td><td align="center">上下左右各10px</td></tr><tr><td align="center"><code>padding: 10px 20px;</code></td><td align="center">上下各10px，左右各20px</td></tr><tr><td align="center"><code>padding: 10px 20px 30px;</code></td><td align="center">上10px，左右各20px，下30px</td></tr><tr><td align="center"><code>padding: 10px 20px 30px 40px;</code></td><td align="center">从上面开始顺时针设置，上10px，右20px，下30px，左40px</td></tr></tbody></table><ul><li>上下左右分开设置</li></ul><p>格式是 <code>padding-xxx</code>，<code>xxx</code>处填入你想要设置的地方的值。上方是 <code>top</code>，下方是 <code>bottom</code>，左侧是 <code>left</code>，右侧是 <code>right</code>。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding-left</span>: <span class="number">10px</span>; <span class="comment">/* 设置左侧内边距为10像素 */</span></span><br></pre></td></tr></table></figure><blockquote><p><code>margin</code>的作用是扩大禁止进入的范围，但是<strong>在元素纵向排列时，相邻部分的 <code>margin</code>会重叠。</strong></p><p>举个例子，现在有两个纵向排列的元素，两个的 <code>margin</code>值都是60px。如果正常计算，当他们重叠后，间隔应该是120px，但实际上，重叠后他们的间隔依然是60px。</p><p>如果在实际开发的过程中搞不懂哪里是 <code>margin</code>，可以使用浏览器的<strong>开发者工具</strong>来确定。</p></blockquote><h2 id="8-用浮动把元素围起来"><a href="#8-用浮动把元素围起来" class="headerlink" title="8.用浮动把元素围起来"></a>8.用浮动把元素围起来</h2><p>使用 <code>float</code>属性，可以让元素自动地向左或者向右靠拢，这时后面的元素将会按照顺序围上来。</p><p><code>float</code>属性一共可以设置三个值：<code>left</code>，<code>right</code>与 <code>none</code>。效果分别是向左浮动，向右浮动，无浮动。</p><p>我们用数字大概表示一下效果：</p><ul><li><code>left</code>：</li></ul><p>1 2 3 4 5</p><p>6 7 8</p><ul><li><code>right</code>：</li></ul><p>5 4 3 2 1</p><p>ㅤ   8 7 6</p><ul><li><code>none</code>：</li></ul><p>1</p><p>2</p><p>3</p><p>…</p><h3 id="如何解除浮动？"><a href="#如何解除浮动？" class="headerlink" title="如何解除浮动？"></a>如何解除浮动？</h3><p>如果不结束浮动的话，那么后面的元素就会一个接一个跟上来。对于这种情况，我们使用 <code>clear</code>属性，在对应的地方结束浮动。先给需要结束的地方赋予 <code>clear</code>属性，再在css中进行选择，设定 <code>clear</code>的值。比如这样：</p><p>HTML文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box float&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box float&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box float&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box float&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box float&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box float&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box float&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box float&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>float练习中, 我想解除包围状态！<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!--在这里设置clear属性--&gt;</span></span><br></pre></td></tr></table></figure><p>CSS文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125; <span class="comment">/* 选择clear属性，并设定对应的值 */</span></span><br></pre></td></tr></table></figure><p>这样，从文字处我们就可以断开浮动了。</p><h2 id="9-适配智能手机的方法"><a href="#9-适配智能手机的方法" class="headerlink" title="9.适配智能手机的方法"></a>9.适配智能手机的方法</h2><p>由于智能手机和电脑的布局很不一样，因此我们有必要为手机做一些适配，让访问者得到更友好的体验。为此，<strong>“响应式Web设计”</strong> 的概念应运而生。</p><p>响应式网站设计的理念是：<strong>页面的设计与开发应当根据用户行为以及设备环境（系统平台、屏幕尺寸、屏幕定向等）进行相应的响应和调整。</strong> 使用响应式布局的优点如下：</p><p>（1）节省HTML文件的运营成本</p><p>在之前，如果想要适配不同的设备，需要单独适配HTML文件，这样的话维护一个网页就必须维护两个或者更多的HTML文件，很费时。如果采用响应式设计，适配的工作交给CSS，那么只需要更新一个HTML文件就可以了。</p><p>（2）可以统一链接</p><p>如果网页是分开部署的，那么对于不同类型的设备，就需要使用不同的链接指向对应的网页，有的时候用户不清楚指向的平台，那么就会导致混乱，响应式布局统一了网页，就可以很好地解决这个问题。</p><p>但是，响应式布局也有以下缺点：</p><p>（1）网站的加载时间变长</p><p>因为不同平台使用的是同一网页，因此对于智能手机专门适配的网页，加载图片的时间会变长。</p><p>（2）页面布局的自由度降低</p><p>响应式Web设计的HTML代码是同一套，区分由CSS完成，有的时候网页布局不会很完美。</p><h3 id="如何改变外观呢？"><a href="#如何改变外观呢？" class="headerlink" title="如何改变外观呢？"></a>如何改变外观呢？</h3><p>通过判断条件。比如这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">599px</span>) /* 宽度在<span class="number">599px</span>以下，使用智能手机的布局 */</span><br></pre></td></tr></table></figure><blockquote><h3 id="什么是乱码？"><a href="#什么是乱码？" class="headerlink" title="什么是乱码？"></a>什么是乱码？</h3><p>简单说，乱码就是机器判断字符编码规则失败的一种情形。</p><p>什么是字符编码呢？在这之前我们得知道，计算机一开始是只能显示英文和阿拉伯数字的，要想显示中文或者其他语言，我们就得用英文和数字进行表示。</p><p>比如说，对于“爱”这个中文汉字，对于GB2312-80标准来说，它用 <code>B0AE</code>来表示，而UTF-8中，它用 <code>E788B1</code>表示。所以，当浏览器从前一种标准“翻译”到另一种标准的时候，就会因为标准不统一造成翻译的偏差，从而导致乱码。</p><p>如果在制作网页的过程中遇到了乱码，请确保HTML文件本身和 <code>head</code>元素中的指定一致。在HTML5中，推荐使用UTF-8，这是全世界通用的统一编码。</p></blockquote><h1 id="五、JavaScript"><a href="#五、JavaScript" class="headerlink" title="五、JavaScript"></a>五、JavaScript</h1><h2 id="1-JavaScript是什么？"><a href="#1-JavaScript是什么？" class="headerlink" title="1.JavaScript是什么？"></a>1.JavaScript是什么？</h2><p>当需要实现一些动态效果，比如图片自动切换，光标放到某个位置后自动出现目录，这个时候就需要JavaScript。如果说把用HTML+CSS的网页说成是绘本，那么JavaScript就可以让绘本动起来。</p><p>JavaScript是一种<strong>编程语言</strong>。也就是说，JavaScript可以运行“程序”。作为比较，HTML和CSS只是“所见即所得”的变成语言，它们“展现”写下来的东西，而不能做到“实现”。</p><p>什么是程序呢？简单来说，程序就是完成一件事情的过程。比如说我们现在要做一道菜，那么做菜的程序可以分为这几步：买菜，洗菜，切菜，炒菜。对于计算机的程序也是一样的，比如说放映幻灯片的时候，程序可以是这样，先展示图片A，两秒后展示图片B，再过三秒后展示图片C……</p><p>对于JavaScript来说，它可以做到一些<strong>基于时间或者用户动作的交互</strong>，就像上面提到的，当访问者把鼠标移动到某个地方的时候，利用JavaScript可以做出相应的回应。</p><p>JavaScript的主要功能如下：</p><ul><li>计算</li><li>鼠标点击或悬停等事件交互的触发</li><li>HTML的改写、添加、删除</li><li>样式表的获取、设定等</li></ul><p>JavaScript属于<strong>脚本语言</strong>，也就是说JavaScript写完就可以直接运行，不需要编译。编译形象地说，就是把写下来的代码“翻译”成计算机可以识别的语言的过程，像是C语言，Java这些都是<strong>编程语言</strong>。</p><blockquote><p>JavaScript和Java没有任何关系。</p></blockquote><h3 id="编写JavaScript"><a href="#编写JavaScript" class="headerlink" title="编写JavaScript"></a>编写JavaScript</h3><p>编写JavaScript同样只需要文本编辑器和浏览器。由于JavaScript的语法较为复杂，我们这里介绍一个简单的例子——用报警的形式显示“test”。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="comment">&lt;!--</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">  alert(&quot;test&quot;);</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">--&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images.shojola.top/Try_JavaScript_d41d8cd98f00b204e9800998ecf8427e.png" alt="实现效果"></p><p>JavaScript也可以像CSS那样外部引用。JavaScript文件的后缀名是 <code>.js</code>，只要写入源代码再在HTML的 <code>head</code>元素中中标记引用即可。就像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sample.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-jQuery是什么？"><a href="#2-jQuery是什么？" class="headerlink" title="2.jQuery是什么？"></a>2.jQuery是什么？</h2><p>jQuery将JavaScript的一些代码进行了模块化，这样就能用更方便的方法使用JavaScript。</p><p>jQuery的使用方法与CSS类似，使用选择器来选择元素，就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;选择器&quot;</span>).方式&#123;参数&#125;;</span><br><span class="line"><span class="comment">/* 表示把选择器选择的元素以某种方式设定参数 */</span></span><br></pre></td></tr></table></figure><p>举一个简单的例子，我们想要把元素p下的文字设置为红色，那么用jQuery就可以写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure><p>其中“方式”这里写的是 <code>css()</code>，意思就是通过CSS这种方式进行颜色的设置。</p><h2 id="3-使用jQuery的插件"><a href="#3-使用jQuery的插件" class="headerlink" title="3.使用jQuery的插件"></a>3.使用jQuery的插件</h2><p>jQuery可以通过引入插件来实现很多功能，这些插件既可以自己开发，也可以直接使用他人已经开发好的。在这一节，我们通过Lightbox插件，来实现“点击图片展开”的功能。</p><p>要想使用插件，我们需要经历以下几步：</p><p>（1）引入jQuery</p><p>我们需要先让jQuery能够被浏览器读取。有这样两种方法：</p><ul><li><p>调用服务器上的jQuery<br>在服务器的 <code>head</code>元素中，加入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>从官网下载<a href="https://jquery.com/">jQuery</a>，再手动导入<br>下载好jQuery之后，使用类似于在线导入的方式，在<code>head</code>元素中加入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>src</code>后面写入的是本地下载的jQuery目录中，此脚本对应的地址。</p></li></ul><p>（2）下载Lightbox</p><p>点击<a href="https://github.com/lokesh/lightbox2/archive/refs/tags/v2.11.4.zip">这里</a>下载Lightbox的源码，得到一个zip文件。将它解压，找到以下文件：</p><ul><li><code>src/css/lightbox.css</code></li><li><code>src/images/*.png</code></li><li><code>src/js/lightbox.js</code></li></ul><p>把这几个文件分别复制到网站目录对应的文件夹里。</p><p>（3）在网站目录里引用Lightbox</p><p>在<code>head</code>元素中引用css样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/lightbox.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>body</code>元素结束前引用js代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/lightbox.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）使用Lightbox</p><p>对于想要使用Lightbox的部分，添加<code>data-lightbox</code>属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">data-lightbox</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当<code>data-lightbox</code>的属性值相同时，会被当作一个组处理。对于图片可以利用这个特性，实现“下一张”“上一张”的切换效果。</p><p>使用<code>data-title</code>属性，可以为图片添加说明。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">data-lightbox</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">data-title</span>=<span class="string">&quot;测试描述&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中兴B860AV1.1 免拆机SuperSU接管root教程</title>
      <link href="/2023/08/02/TVBox-Tutorial/"/>
      <url>/2023/08/02/TVBox-Tutorial/</url>
      
        <content type="html"><![CDATA[<blockquote><p>家里有一个办宽带送的电视盒子，但是1+8，安卓4.4的配置已经是太太太老了，还预装了一堆IPTV的东西拖累运行速度，况且安卓4.4也不支持adb激活冰箱，于是就只能通过root来解决这个问题了。不过网上的教程都需要通过拆机接TTL线来搞，实在是有点麻烦，考虑到拆机核心思路也就是拿到shell的root权限，如果我们能在系统中直接拿到root权限就好办了。安卓4.4时代正是各种一键root工具开花的时候，因此上面这种思路就变得好实现了。</p><p><strong>免责声明：本文只提供搞机的思路，由此带来的损失本人不承担任何责任！</strong></p><p>需要的工具你可以直接点击蓝色的字体进行下载。</p></blockquote><h1 id="开启adb调试"><a href="#开启adb调试" class="headerlink" title="开启adb调试"></a>开启adb调试</h1><p>下载<a href="https://images.shojola.top/STB_ConfigTool_V7.6.7_Bin_Site.rar">机顶盒现场配置工具</a>，解压其中的bin文件夹（密码：qizhi），双击StbCfgTool.exe。打开后先点击<code>Character Info</code>，右边会出来一段字符，复制下来，然后点击<code>Next</code>，把刚刚得到的这串字符复制进去，点<code>下一步</code>，就可以进到主页面了。</p><blockquote><p>Windows 10以上的系统会出现界面显示不全的现象，不需要去理会。</p></blockquote><p>将你的机顶盒连接到无线网络，注意必须和电脑在同一个局域网内（也就是连接到一个路由器的网上）。在配置工具内在<code>ipv4</code>一栏输入你机顶盒的IP地址，点击<code>连接</code>，等待连接成功后再点<code>打开 ADB</code>。如果在等待一段时间后，按钮变为<code>关闭 ADB</code>，那么这一步的设置就完成了。</p><p>下载<a href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn">adb工具包</a>并解压，在工具包的目录下打开cmd。为了方便描述，在这里假定盒子的IP地址为<code>192.168.0.5</code>。</p><p>打开cmd后，输入以下命令远程连接盒子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect 192.168.0.5</span><br></pre></td></tr></table></figure><p>如果出现<code>connected to 192.168.0.5:5555</code>就代表这一步完成了。为了避免不必要的麻烦，我们先看看能不能直接获取到adb shell的root权限。往里面输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure><p>此时前面应该会变成<code>shell@orange:/ $</code>这样的字样。输入<code>su</code>，观察<code>$</code>是否会变成<code>#</code>，同时前面应该会变成<code>root@orange:/ #</code>这样的字。如果可以的话，那么直接就可以卸载掉不必要的软件了，如果报错的话，那么我们就要手动进行root权限的接管。</p><h1 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h1><p>下载<a href="https://images.shojola.top/360cjroot-7.0.7.apk">360超级root</a>，回到刚才的cmd窗口。先输入<code>exit</code>退出shell模式，然后我们用adb把apk安装到盒子上。为了方便描述，在这里我们假定安装包路径为<code>D:\360root.apk</code>。</p><p>向cmd里输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install D:\360root.apk</span><br></pre></td></tr></table></figure><p>等待安装完成。安装完成后，转到电视盒子插上鼠标，打开360root，点击<code>一键ROOT</code>，等待root完毕。</p><blockquote><p>等待过程中很可能会出现电视盒子卡死，或者提示root失败等，多尝试几次再确认是否可行。</p></blockquote><p>root完毕之后，重复前面的步骤，确认是否可以取得shell的root权限。可行之后转到下一步。</p><blockquote><p>如果盒子弹出了给予名字为<code>Shell</code>的APP请求root权限的对话框，请选择允许。</p></blockquote><h1 id="接管root权限"><a href="#接管root权限" class="headerlink" title="接管root权限"></a>接管root权限</h1><p>下载<a href="https://images.shojola.top/SuperSU.zip">SuperSU的相关文件</a>并解压，回到我们刚刚已经获取了权限的shell中。</p><p>先用<code>mkdir</code>命令创立一个目录，我们要把这个目录作为临时中转站：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /sdcard/</span><br><span class="line">mkdir SuperSUTemp</span><br></pre></td></tr></table></figure><p>随后，我们运行两次<code>exit</code>命令退出shell模式。就像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@orange:/ # exit</span><br><span class="line">shell@orange:/ $ exit</span><br><span class="line"></span><br><span class="line">C:\Users\Rinko24&gt;</span><br></pre></td></tr></table></figure><p>在这里我们假定你把SuperSU的文件复制出来的目录是<code>D:\SuperSU</code>。运行以下命令，把相关文件复制到临时目录里：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">adb push D:\SuperSU\su /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\su /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\supolicy /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\supolicy /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\chattr /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\chattr /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\suinit /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\suinit /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\sukernel /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\sukernel /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\daemonsu /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\daemonsu /sdcard/SuperSUTemp/</span><br><span class="line">adb push D:\SuperSU\libsupol.so /sdcard/SuperSUTemp/</span><br></pre></td></tr></table></figure><p>然后进入到root权限的shell中。先把system分区挂载为可读写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw /system</span><br></pre></td></tr></table></figure><p>随后，移动临时目录中的文件到system分区下对应的文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cp /sdcard/SuperSUTemp/su /system/bin/</span><br><span class="line">cp /sdcard/SuperSUTemp/su /system/xbin/</span><br><span class="line">cp /sdcard/SuperSUTemp/supolicy /system/bin/</span><br><span class="line">cp /sdcard/SuperSUTemp/supolicy /system/xbin/</span><br><span class="line">cp /sdcard/SuperSUTemp/chattr /system/bin/</span><br><span class="line">cp /sdcard/SuperSUTemp/chattr /system/xbin/</span><br><span class="line">cp /sdcard/SuperSUTemp/suinit /system/bin/</span><br><span class="line">cp /sdcard/SuperSUTemp/suinit /system/xbin/</span><br><span class="line">cp /sdcard/SuperSUTemp/sukernel /system/bin/</span><br><span class="line">cp /sdcard/SuperSUTemp/sukernel /system/xbin/</span><br><span class="line">cp /sdcard/SuperSUTemp/daemonsu /system/bin/</span><br><span class="line">cp /sdcard/SuperSUTemp/daemonsu /system/xbin/</span><br><span class="line">cp /sdcard/SuperSUTemp/libsupol.so /system/lib/</span><br></pre></td></tr></table></figure><p>为这些文件添加权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">chmod 4755 /system/bin/su</span><br><span class="line">chmod 4755 /system/xbin/su</span><br><span class="line">chmod 4755 /system/bin/supolicy</span><br><span class="line">chmod 4755 /system/xbin/supolicy</span><br><span class="line">chmod 4755 /system/bin/chattr</span><br><span class="line">chmod 4755 /system/xbin/chattr</span><br><span class="line">chmod 4755 /system/bin/suinit</span><br><span class="line">chmod 4755 /system/xbin/suinit</span><br><span class="line">chmod 4755 /system/bin/sukernel</span><br><span class="line">chmod 4755 /system/xbin/sukernel</span><br><span class="line">chmod 4755 /system/bin/daemonsu</span><br><span class="line">chmod 4755 /system/xbin/daemonsu</span><br><span class="line">chmod 0644 /system/lib/libsupol.so</span><br></pre></td></tr></table></figure><p>随后设置su文件的自启选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;/system/xbin/daemonsu --auto-daemon &amp;&quot; &gt;&gt; /system/bin/init.zte.post_boot.sh</span><br><span class="line">/system/xbin/daemonsu --auto-daemon</span><br></pre></td></tr></table></figure><p>现在我们已经都设置好了。接下来卸载掉360超级root:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm uninstall --user 0 com.qihoo.permmgr</span><br></pre></td></tr></table></figure><p>然后关闭掉盒子电视自带的安装限制，并设置自动启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setprop config.Android.AppInstallCtrl 3</span><br><span class="line">settings put secure install_non_market_apps 1</span><br><span class="line">settings put global install_non_market_apps 1</span><br><span class="line">echo &quot;setprop config.Android.AppInstallCtrl 3&quot; &gt;&gt;/system/bin/init.zte.post_boot.sh</span><br><span class="line">echo &quot;settings put secure install_non_market_apps 1&quot; &gt;&gt;/system/bin/init.zte.post_boot.sh</span><br><span class="line">echo &quot;settings put global install_non_market_apps 1&quot; &gt;&gt;/system/bin/init.zte.post_boot.sh</span><br></pre></td></tr></table></figure><p>连续执行两次<code>exit</code>退出shell，然后安装SuperSU：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install D:\SuperSU\SuperSU.apk</span><br></pre></td></tr></table></figure><p>接着转到盒子，把你的盒子网络连接到可以科学上网的环境，打开SuperSU，不出意外会提示你更新二进制文件，点击更新，按照程序的提示进行操作，更新完毕后就可以正常授权了。</p><p>接下来的事情就可以自己选择了，卸载预装，安装当贝桌面这些都可以。预装软件建议通过<a href="https://github.com/hyongbai/AirFrozen">AirFrozen</a>进行冻结，不需要自己去卸载预装，以免不必要的麻烦。</p><blockquote><p>参考资料：</p><p><a href="https://www.znds.com/tv-583854-1-1.html">中兴现场配置工具STB_ConfigTool_V7.6.7_Bin_Site</a></p><p><a href="https://www.znds.com/tv-980841-1-1.html">大江苏b860av1.1无UBOOT 文件救砖成功新的分享。</a></p><p><a href="https://www.znds.com/tv-1115981-1-1.html">B860AV1.1-T优化第二弹:获取 root 权限</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建教程</title>
      <link href="/2023/07/31/Hexo-Tutorial/"/>
      <url>/2023/07/31/Hexo-Tutorial/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这几天忽然翻到了Qexo这个项目，有了Qexo写文章就可以更加方便了，于是我将我的博客迁移从Gridea到了Hexo。Hexo的上手门槛要比Gridea高不少，为了实现自动化部署也翻阅了不少资料。在此记下一点心得。由于过程中没有截图，因此文章大部分内容都会以文字叙述进行，我会尽量叙述完整。</p><p>以下的文章都基于Windows环境操作。<del>你都用Linux了你还需要看这篇文章吗？</del> <del>Mac用户：？</del></p></blockquote><h1 id="环境依赖安装"><a href="#环境依赖安装" class="headerlink" title="环境依赖安装"></a>环境依赖安装</h1><p>下载<a href="https://nodejs.org/en">Node.js</a>和<a href="https://git-scm.com/downloads">Git</a>两个工具，Node.js选择LTS版本就可以，Git可以选择Standalone Installer版本，安装更方便，位数根据电脑自身确定。安装时直接一直下一步就好了。</p><p>在下载安装完毕后，打开cmd，输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm --version</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>如果能看到像是下方这样的输出，就证明安装完成了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.22621.1928]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Rinko24&gt;npm --version</span><br><span class="line">8.19.4</span><br><span class="line"></span><br><span class="line">C:\Users\Rinko24&gt;git --version</span><br><span class="line">git version 2.40.1.windows.1</span><br></pre></td></tr></table></figure><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><p>在<a href="https://github.com/">Github</a>注册一个账号。注册成功后点击你的头像，选择Your repositories，在弹出来的页面中点击绿色的New按钮，创建仓库。我们一共需要创建两个仓库，分别是：</p><p>（1）存放博客文件的仓库，仓库名字（也就是Repository name）这一栏必须填写为你的用户名.github.io，比如我的这个仓库名字就是 <code>LostPear/lostpear.github.io</code>。</p><p>（2）存放博客源文件的仓库。仓库名字任意，权限建议为 <code>Private</code>。为了方便描述，这篇教程中我们把仓库名定义为 <code>Username/HexoSourceFile</code>。</p><p>创建好后备用。</p><h1 id="初始化Hexo文件"><a href="#初始化Hexo文件" class="headerlink" title="初始化Hexo文件"></a>初始化Hexo文件</h1><p>我们先把存放博客源文件的仓库复制下来，在这里假设我们复制到D盘。</p><p>打开cmd命令窗口，先用 <code>cd</code>命令移动到D盘：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd D:\</span><br></pre></td></tr></table></figure><p><strong>（可选）</strong> 为了确保Git可以顺利访问Github，我们可以设置Git的代理。命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy https://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>其中 <code>https://127.0.0.1:7890</code>为代理的地址，这一种情况可以在Clash代理的条件下使用，需要在Clash中开启 <code>Allow LAN</code>。</p><p>Git使用时需要指定用户信息。使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “你的Github用户名&quot;</span><br><span class="line">git config --global user.email &quot;你注册Github使用的邮箱&quot;</span><br></pre></td></tr></table></figure><p>为了保证Git可以正常使用，需要生成ssh密钥并添加到账户中。使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你注册Github使用的邮箱&quot;</span><br></pre></td></tr></table></figure><p>期间一直按回车就可以。打开Github，点击右上角头像选择 <code>Settings</code>，再点击 <code>SSH and GPG keys</code>，点击 <code>New SSH</code>，名字随意。在桌面上点击鼠标右键，选择 <code>Git Bash Here</code>，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>将输出的内容全部复制到Key这一栏，保存。回到cmd窗口，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现类似于下方这样的输出信息，这一步就完成了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.22621.1928]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Rinko24&gt;ssh -T git@github.com</span><br><span class="line">Hi LostPear! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>接着使用以下命令把仓库复制到本地：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Username/HexoSourceFile.git</span><br></pre></td></tr></table></figure><p>本地仓库保存在<code>D:\HexoSourceFile</code>下，一会还需要用到这个仓库目录。</p><p>接下来部署hexo。打开一个新的cmd窗口。为了加快部署速度，我们将下载的源换到淘宝源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>然后安装Hexo以及相关依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>新建一个空文件夹存放生成的hexo文件，在这里假设为<code>D:\HexoTemp</code>。利用<code>cd</code>命令切换到这里，在这个空文件夹下执行以下命令进行Hexo的初始化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>再运行以下命令，安装运行hexo需要的基础插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>运行完成后你会看到一堆文件，这些就是Hexo的源文件。你可以翻阅<a href="https://zhuanlan.zhihu.com/p/492115006">这篇教程</a>来了解它们的用途。把这个文件夹下的全部文件复制到<code>D:\HexoSourceFile</code>里。全部完成后备用。</p><h1 id="创建自动化部署"><a href="#创建自动化部署" class="headerlink" title="创建自动化部署"></a>创建自动化部署</h1><p>先打开<a href="https://github.com/theme-keep/hexo-deploy-github-pages-action">这个项目</a>，点击 <code>Fork</code>把这个项目拷贝一份到我们的账户里，在这里指定为 <code>Username/hexo-deploy-github-pages-action</code>。Fork的主要目的是为了方便我们的修改。</p><p>之后打开你源文件的地址，点击上面一栏的 <code>Action</code>按钮，点击Simple workflow下的 <code>Configure</code>，删除里面的所有内容，输入以下指令保存（一部分需要按照注释修改）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">name: Hexo Deploy GitHub Pages</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">  </span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout</span><br><span class="line">      uses: actions/checkout@master</span><br><span class="line"></span><br><span class="line">    - name: Build and Deploy</span><br><span class="line">      uses: Username/hexo-deploy-github-pages-action@master # Username改为你Github的用户名</span><br><span class="line">      env:</span><br><span class="line">        PERSONAL_TOKEN: $&#123;&#123; secrets.HEXO_DEPLOY &#125;&#125;</span><br><span class="line"></span><br><span class="line">        # The repository the action should deploy to.</span><br><span class="line">        PUBLISH_REPOSITORY: Username/username.github.io # 这里改为你存放博客文件的仓库，也就是上文提到的第一个仓库</span><br><span class="line"></span><br><span class="line">        # The branch the action should deploy to.</span><br><span class="line">        BRANCH: main</span><br></pre></td></tr></table></figure><p>在主页点击你的头像，选择 <code>Settings</code>-&gt;<code>Developer Options</code>，选择 <code>Personal access tokens</code>下的 <code>Tokens (classic)</code>，在右边选择 <code>Generate new token</code>-&gt;<code>Generate new token (classic)</code>，名字随便取，<code>Expiration</code>选择 <code>No expiration</code>，勾选 <code>repo</code>，<code>workflow</code>，<code>write:packages</code>，<code>user</code>，保存。随后会出现一段代码，一定要保存好，它只会出现这一次，如果没有及时保存就需要重新创建了。</p><p>打开你存放源文件的仓库，点击 <code>Settings</code>-&gt;<code>Secerts and variables</code>，点下面的 <code>Actions</code>，点击右边的 <code>New repositery secret</code>，名字输入 <code>HEXO_DEPLOY</code>，内容输入你刚刚得到的token，保存。</p><h1 id="上传博客文件"><a href="#上传博客文件" class="headerlink" title="上传博客文件"></a>上传博客文件</h1><p>这一步我们使用Git把文件上传仓库。用<code>cd</code>命令切换到本地仓库下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd D:\HexoSourceFile</span><br></pre></td></tr></table></figure><p>先把仓库同步到最新状态，便于之后上传新文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>首先，把这个仓库中的文件存到暂存区。输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add ./</span><br></pre></td></tr></table></figure><p>随后，输入以下命令确认即将修改的文件，确保没有红色：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>然后，使用以下命令编辑此次提交的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;描述信息&quot;</span><br></pre></td></tr></table></figure><p>最后，提交更改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>等待两三分钟部署完成之后，访问 <code>https://Username.github.io</code>，你就能看到自己的网页了。</p><blockquote><p>你也可以利用 Visual Studio Code 来进行可视化的Git管理，此处不再赘述。</p></blockquote><h1 id="部署到Vercel"><a href="#部署到Vercel" class="headerlink" title="部署到Vercel"></a>部署到Vercel</h1><p>国内访问Github实在是太慢了，这会严重拖累你博客的访问速度。我们可以部署到Vercel来改善这个问题。</p><p><strong>使用这种方法，你必须要有一个自己的域名，因为Vercel默认为项目提供的域名在国内是被屏蔽的，但是Vercel为项目提供的的加速服务还是能够正常用的。</strong></p><p>打开<a href="https://vercel.com/">Vercel官网</a>，使用你的Github账户登录，注册好后点击头像选择 <code>Dashboard</code>，在新页面中选择右上角的 <code>Add New...</code>，选择 <code>Project</code>。随后，左侧的 <code>Import Git Repository</code>中，选择你存放博客文件的仓库（也就是第一个）点 <code>Import</code>，项目名字随便取，点击 <code>Deploy</code>。部署完成后，点击 <code>Domains</code>，添加你想要的域名。</p><blockquote><p>在这里添加你的域名的时候，最好不要直接设置你的根域名，二是加一个二级解析。举个例子，如果你购买的域名是 <code>example.com</code>，那么你不要直接把这个设置为你的网站域名，而是更改为二级域名，比如 <code>blog.example.com</code>。</p></blockquote><p>设置好之后，按照提示在你的域名服务商处添加DNS解析记录。</p><p>回到工作目录，编辑 <code>_config.yml</code>，<code>url:</code>后的内容改为你刚刚设置的域名地址，随后保存并使用Git进行提交。全部设置完毕后，访问你的域名，应该就能看到你的博客页面了。</p><h1 id="（可选）-设置图床"><a href="#（可选）-设置图床" class="headerlink" title="（可选） 设置图床"></a><strong>（可选）</strong> 设置图床</h1><p>请参阅<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">PicGo的设置文档</a>，此处不再赘述。</p><blockquote><p><strong>（可选）</strong> 你可以设置CDN，来加快图片在国内的访问速度。</p></blockquote><h1 id="（可选）-设置Qexo"><a href="#（可选）-设置Qexo" class="headerlink" title="（可选） 设置Qexo"></a><strong>（可选）</strong> 设置Qexo</h1><p><a href="https://github.com/Qexo/Qexo/issues">Qexo</a>是一个开源项目，它可以很方便地对Hexo博客进行管理。设置Qexo请参阅<a href="https://www.oplog.cn/qexo/">文档</a>。</p><blockquote><p>如果要用Qexo设置图床，要注意的是自定义域名的填写逻辑与PicGo是不一样的。Qexo填写时需要精确到你的文件名。</p></blockquote><p>至此所有的设置就已经完成了。至于更高级的Hexo玩法，就请自己探索体验吧。</p><blockquote><p>一些小建议:</p><ol><li>每次在本地编辑博客时，最好先执行一次 <code>git pull</code>命令同步最新的源文件，防止提交时因为冲突而报错。</li><li>如果想要为博客设置封面，使用Qexo写作时，在 <code>其他参数</code>一栏下新建一个名为 <code>cover</code>的参数，后面写你需要做封面的图片地址。</li><li>在本地编辑博客时，可以通过 <code>hexo s</code>临时查看博客渲染后的样式。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phigros时间线整理</title>
      <link href="/2023/07/30/Phigros-Timeline/"/>
      <url>/2023/07/30/Phigros-Timeline/</url>
      
        <content type="html"><![CDATA[<p>目前还不完全，持续整理中。<br>游戏相关设定还请参阅<a href="https://wiki.pigeon-games.com/">林泊百科</a>。</p><h2 id="阅读前需要知道的一些概念"><a href="#阅读前需要知道的一些概念" class="headerlink" title="阅读前需要知道的一些概念"></a>阅读前需要知道的一些概念</h2><p>1.异想之物：受异想污染而出现在像素塔中的奇妙之物。它源于人类（泛指一切因果体）的幻想，它可以是任何已经存在的生物，也可以是人类心中所相信的故事，它出现得蛮不讲理，又个个触动人心。<br>2.像素塔：<a href="https://www.bilibili.com/read/cv15596688?spm_id_from=333.999.0.0" title="作者：5U级氟化氢 出处：bilibili">人类为了逃避未来现实中，全球冰冻的严酷环境而制造的虚拟世界。分为十层，每一层都是一片广阔的世界。以像素塔内独特的.B.P&#x2F;.A.P纪年法纪年（年份最多为三位数）。</a><br>3.林泊（Limbo）：指知晓各自现实身份的像素塔住民。<br>4.土星（Saturn）系统：依靠异想科技与个人终端系统PhigrOS制作出的林泊通讯系统，是进入中之层的“门票”，某些非林泊用户也可通过邀请码进入土星系统，但AI和异想之物不能进入，除非持有像素塔的管理权限。土星系统包含社交网络，网上交易，电子图书馆等功能，林泊百科也在该系统中，类属内嵌软件。<br>5.重生：以人类意识投影到像素塔世界的住民死后将重生在任何区域，身份识别码（先民，异想之物，AI）也可能改变，重生后住民失去记忆，只有林泊能保存上一代的记忆。因为灵魂总数不变，所以即使有分身机制，像素塔的人口依旧增加缓慢。重生后的外表年龄随机，但会更接近心理年龄。<br>6.泯灭：指像素塔住民死亡后，不再重生的异常情况。<br>7.PhigrOS：外貌为白色条状物，是像素塔的通用个人终端系统，起初是特殊时期推行的通讯工具，只容像素塔的住民（人类）登陆，后来也混入了大量塔内AI，以及异想之物。PhigrOS支持嵌入各类子系统，作为进入中之层的门票“土星系统”，也是依附PhigrOS运行的。<br>8.门牌：门牌分为地点门牌与虚拟门牌两类。地点门牌记录像素塔内坐标的代码，由最初制造土星系统的团队提出。近年随着虚拟门牌的发明，自定义字符牌也逐渐走入了大家的视线，使用者可以通过门牌的分享码到达管理员设置的虚拟空间。<br>9.故事中的第1年为塔世界的第770年。</p><h2 id="Chapter1：冰封世界"><a href="#Chapter1：冰封世界" class="headerlink" title="Chapter1：冰封世界"></a>Chapter1：冰封世界</h2><h3 id="53"><a href="#53" class="headerlink" title="53&#x2F;?&#x2F;?"></a>53&#x2F;?&#x2F;?</h3><p>一位战士训练马术时，看到了”塔“。</p><h3 id="57-04-08"><a href="#57-04-08" class="headerlink" title="57&#x2F;04&#x2F;08"></a>57&#x2F;04&#x2F;08</h3><p>战士与”她“失联，被异想俘获。</p><h3 id="57-04-09"><a href="#57-04-09" class="headerlink" title="57&#x2F;04&#x2F;09"></a>57&#x2F;04&#x2F;09</h3><p>战士被异想”审判“。</p><h3 id="60-04-10"><a href="#60-04-10" class="headerlink" title="60&#x2F;04&#x2F;10"></a>60&#x2F;04&#x2F;10</h3><p>战士被处死。</p><h3 id="60"><a href="#60" class="headerlink" title="60&#x2F;?&#x2F;?"></a>60&#x2F;?&#x2F;?</h3><p>像素塔离开冰封层。</p><h3 id="740-04-11"><a href="#740-04-11" class="headerlink" title="740&#x2F;04&#x2F;11"></a>740&#x2F;04&#x2F;11</h3><p>Dlyro打算重返冰封层。</p><h3 id="770-02-28"><a href="#770-02-28" class="headerlink" title="770&#x2F;02&#x2F;28"></a>770&#x2F;02&#x2F;28</h3><p>Dlyro和Gino讨论自己存在世界的真实性，Dlyro也开始第一次发觉自己的林泊身份。</p><h3 id="770-02-29"><a href="#770-02-29" class="headerlink" title="770&#x2F;02&#x2F;29"></a>770&#x2F;02&#x2F;29</h3><p>鸠用Alpa记录异常的山谷风声，与正在萨里山巡逻的Gino相遇，他带鸠回到营地，并向鸠介绍他的两用摩托Trophon。</p><h3 id="770-03-01"><a href="#770-03-01" class="headerlink" title="770&#x2F;03&#x2F;01"></a>770&#x2F;03&#x2F;01</h3><p>鸠和大伙吃火锅，她翻找Gino的衣柜然后找了件衬衫穿。</p><h3 id="770-03-02"><a href="#770-03-02" class="headerlink" title="770&#x2F;03&#x2F;02"></a>770&#x2F;03&#x2F;02</h3><p>鸠加入第七小队。</p><h3 id="770-03-03"><a href="#770-03-03" class="headerlink" title="770&#x2F;03&#x2F;03"></a>770&#x2F;03&#x2F;03</h3><p>冰原上飘来了雪，迎来了春天，Gino向鸠介绍渔猎节，并介绍自己的梆笛，冰封纪元之后，人们不再做乐器，他的这一份是七百年来绝无仅有的历史遗珠。鸠记录下Gino的笛声，Gino问鸠她拿Alpa录了什么，她说只能哥哥教他和好朋友分享。<br>鸠和队长的关系很好，Carl和Theo讨论她，Carl鼓励Theo在渔猎节和Dlyro队长表白。</p><h3 id="770-03-04"><a href="#770-03-04" class="headerlink" title="770&#x2F;03&#x2F;04"></a>770&#x2F;03&#x2F;04</h3><p>第七巡逻队仓库,鸠吃空投小饼干（超级难吃）。</p><h3 id="770-03-06"><a href="#770-03-06" class="headerlink" title="770&#x2F;03&#x2F;06"></a>770&#x2F;03&#x2F;06</h3><p>对巡逻队的队员来说，摩托侧面的花纹意义重大，Gino刚加入巡逻队时也想了很久。花纹设计得很成功，目前还没有人一眼破解密码。<br>鸠和Gino一起写报告并且商量晚饭的内容，以此引出对Alpa的介绍。喵Alpa是哥哥的大学毕业设计之一，拥有稍高出普通猫咪的智能，平时睡在录音笔中，也会在鸠的个人终端冒泡。</p><h3 id="770-03-07"><a href="#770-03-07" class="headerlink" title="770&#x2F;03&#x2F;07"></a>770&#x2F;03&#x2F;07</h3><p>介绍魇魉角（冰原食材的最精华部分）以及第七小队的标配武器：电磁霰弹枪。</p><h3 id="770-03-09"><a href="#770-03-09" class="headerlink" title="770&#x2F;03&#x2F;09"></a>770&#x2F;03&#x2F;09</h3><p>因为送苟驼油，第七小队队长Dlyro订购了全年的《冰川美食汇》，鸠发现每一期Gino都有中奖，但是他本人并不知情。之后鸠查清，因为冰川美食汇从第七小队诞生，他本人也有菜单和指导，所以每次杂志抽奖都会给第七小队预留一份。</p><blockquote><p>插一嘴，苟驼可能就是现实中的骆驼。</p></blockquote><h3 id="770-03-17"><a href="#770-03-17" class="headerlink" title="770&#x2F;03&#x2F;17"></a>770&#x2F;03&#x2F;17</h3><p>鸠在睡觉前发现了“塔”。猎渔节拉开序幕，鸠获得新装备鱼篓（由魇魉皮蒙肋骨架构成，防水性能极好），她在抓鱼时进行人生思考：丰收是大自然的馈赠，而被捕猎的生物是宿命还是偶然。</p><h3 id="770-03-23"><a href="#770-03-23" class="headerlink" title="770&#x2F;03&#x2F;23"></a>770&#x2F;03&#x2F;23</h3><p>Theo被魇魉叼走，Carl在死前亲手把他的物件交给了Dlyro队长，并且说有什么东西正在从深井里出来。<br>芬德斯不喜欢病号服，他一拿到巡逻员的制服就把病号服扔掉了。<br>阿爽在雪地上醒来，手里还拿着花柄小刀。他说在遇到芬德斯前自己还在和妻子做饭。芬德斯说自己了解了情况，让阿爽跟着他走。</p><h3 id="770-03-26"><a href="#770-03-26" class="headerlink" title="770&#x2F;03&#x2F;26"></a>770&#x2F;03&#x2F;26</h3><p>Dlyro队长交给Gino一个锦囊，里面写着让他去和鸠相遇的地方，众巡逻队组织队中的精英人员参与围剿深井里大量涌出的冰原魇魉，但是队长没有让Gino和鸠参与。</p><blockquote><p><a href="https://www.bilibili.com/read/cv15596688?spm_id_from=333.999.0.0" title="作者：5U级氟化氢 出处：bilibili">实际上冰原魇魉也只是在逃离黑洞。<br>没有让鸠和Gino参与任务是因为，只要Dlyro队长还活着，她就可以随时通过“异想再造”的方式，复活死亡的异想人类种队员。而鸠和Gino不是异想，所以有必要避免很可能会死亡的任务。</a></p></blockquote><h3 id="770-03-27"><a href="#770-03-27" class="headerlink" title="770&#x2F;03&#x2F;27"></a>770&#x2F;03&#x2F;27</h3><p>阿爽正在逃离，他说自己找到了出去的路。</p><h3 id="770-03-28"><a href="#770-03-28" class="headerlink" title="770&#x2F;03&#x2F;28"></a>770&#x2F;03&#x2F;28</h3><p>鸠发现一张写满文字的魇魉皮，她放入Alpa进行解析。</p><h3 id="770-03-29"><a href="#770-03-29" class="headerlink" title="770&#x2F;03&#x2F;29"></a>770&#x2F;03&#x2F;29</h3><p>Kouma在垃圾堆里捡到了魔术棒，久住正在拿它努力练习，想通过魔术让大家露出笑容。</p><h3 id="770-03-31"><a href="#770-03-31" class="headerlink" title="770&#x2F;03&#x2F;31"></a>770&#x2F;03&#x2F;31</h3><p>Alpa解析文字到3%，确定了塔，傀儡，梦醒三个关键词。</p><h3 id="770-03-32"><a href="#770-03-32" class="headerlink" title="770&#x2F;03&#x2F;32"></a>770&#x2F;03&#x2F;32</h3><p>Dlyro被吸进了黑洞，只留给Gino属于林泊的联络权限。冰原遭遇了大灾难，鸠和Gino在队长指引下前往萨里山，只有这条路受到塔的庇护。走进光桥是最底层的禁忌，但鸠和Gino踏上了旅途，前往另一侧的新世界。在逃亡过程中，Trophon被黑洞吸取了它的两只后视镜，鸠拍到了黑色脂球离开主人身体的画面，这种画面鸠感到熟悉又陌生。</p><h2 id="Chapter2：废土之下"><a href="#Chapter2：废土之下" class="headerlink" title="Chapter2：废土之下"></a>Chapter2：废土之下</h2><h3 id="770-04-01"><a href="#770-04-01" class="headerlink" title="770&#x2F;04&#x2F;01"></a>770&#x2F;04&#x2F;01</h3><p>通过光门时，鸠捡到了一块神奇石头（星星的碎片·冬），似乎触摸它的左上角会发出奇怪的声音。<br>鸠和Gino循着歌声找到了拾荒者们，机械滚落砸在了拾荒者身上，鸠和Gino帮他们脱离了困境并且熟络了起来。</p><h3 id="770-04-02"><a href="#770-04-02" class="headerlink" title="770&#x2F;04&#x2F;02"></a>770&#x2F;04&#x2F;02</h3><p>鸠喜欢做完录音日记后修改频率再保存（应该就类似于设置密码），她发现拾荒者陷入困境的真正原因是为了翻新涂鸦墙，在找颜料的途中迷路了。</p><h3 id="770-04-03"><a href="#770-04-03" class="headerlink" title="770&#x2F;04&#x2F;03"></a>770&#x2F;04&#x2F;03</h3><p>Kouma站在石梯高处观看日出，遇到认床睡不好的鸠。他和鸠谈起久住，鸠说他们暂时住在第八区，找到第三区的入口就离开，Kouma说久住和她哥哥也是，离开后就再也没回来，石林在倒悬之后就没有多少活人了。<br>在拾荒者的帮助下，Gino更换了摩托的零件并且加装了广播系统。<br>鸠拍下了水塔和堡垒，水塔是石林人赖以生存的装置，每座水塔都被当地居民画上了奇怪的图案和当地编号。Gino收到的求救信号显示，求救者正从堡垒门内向外缓慢移动，鸠忽然发现有一个黑点向他们飞来，与此同时之前的求救信号消失，取而代之的是无数的求救信号。鸟群似乎不能离开堡垒所在的山谷，他们一直到离开第十区才敢熄掉油门。<br>Gino和鸠在第八区发现了绿毛鸡，它装相非常怪异。他们用绿毛鸡做叫花鸡吃，结果差点中毒。</p><blockquote><p>《林泊百科》：绿毛鸡的羽毛熬成的汤，有解除重金属中毒状态的作用。</p></blockquote><p>Alpa半夜溜出来，被久住发现并且各种rua。<br>阿爽和芬德斯坐船漂浮在海面上，芬德斯提醒他这个世界不安全，要时刻保持警惕。</p><h3 id="770-04-04"><a href="#770-04-04" class="headerlink" title="770&#x2F;04&#x2F;04"></a>770&#x2F;04&#x2F;04</h3><p>鸠在Alpa身上发现了一个疑似绘本的文件，它生动形象地描绘了一只会狗叫的小猫咪来到彩虹瀑布，与各色神奇生物相遇相知，相伴同行的历险故事。<br>Alpa破解377文件仍然没有什么进展，鸠记录清晨的声音。登上塔的第四天，他们在拾荒人的帮助下逐渐了解了光门后的新世界石林，并在第八区搭建了临时的家。</p><blockquote><p>石林安静地像过去的冰封，或许这也是暴风雨前的平静，临走前Dlyro队长的锦囊提到，塌陷现象是条没了狗链的猎犬，贪婪成性，凡是见到的活物都得咬上一口，冰封遭难后，不久就是石林，再接着，存在于塔序列中的世界都将难逃此劫。故事会就此完结吗？</p></blockquote><p>Gino发现了一块石，这是石油河尽头的产物，触感光滑，晴天会折射出五色异彩，可以顺着五彩石形成的河滩向南走，循迹找到尽头的吐浑瀑布。</p><blockquote><p>《林泊百科》：吐浑瀑布与无尽海至白林的审判航道直接相连，居住着大量从无尽海溯流而上的异想之物，若非必要通行，请各位冒险者远离吐浑瀑布。</p></blockquote><h3 id="770-04-05"><a href="#770-04-05" class="headerlink" title="770&#x2F;04&#x2F;05"></a>770&#x2F;04&#x2F;05</h3><p>久住发现了一条金属臂，她思考能不能吃。<br>鸠把河对岸第二区送的苦杏仁喂给了Alpa，但是它不喜欢吃，等Alpa分析完鸠就把它扔到了第八区的水塔旁的湿沙土里。<br>Gino前往第一区中央回收站登记注册，领取拾荒者令牌。似乎每一层都有这样的身份证明。</p><h3 id="770-04-06"><a href="#770-04-06" class="headerlink" title="770&#x2F;04&#x2F;06"></a>770&#x2F;04&#x2F;06</h3><p>在前往拜访第三区管理Fuli的途中，鸠捡到了不少不同型号的子弹壳。<br>久住拜托Fuli修理的收音机似乎和鸠小时候有的型号相同。</p><h3 id="770-04-07"><a href="#770-04-07" class="headerlink" title="770&#x2F;04&#x2F;07"></a>770&#x2F;04&#x2F;07</h3><p>Gino在第三区生化人工厂发现液压剂，有着“生化人专用”的标签。<br>Fuli很难修好收音机，鸠凭借着哥哥教她的记忆修好了，但是她仍然想不起她的来历和去向，她答应第二天回第八区路过第六区时帮Fuli把收音机带给久住，并且和Gino加了Fuli的好友。<br>久住站在巢栖道站的月台上，她在等一班火车，这辆车她等了好久，几十年的清晨，几十年的傍晚，所有太阳与地平线相交的时刻，她都在这里默默等待。她的记忆里，有那么一个人，松开她的手，登上列车，自此再未回头，她还在等那班列车，想把自己画的绘本给他看，想，再见他一面。<br>HQ004班次列车是唯一一辆驶经巢栖道的火车，两人见久住上车后，也购票前往，随后在火车里寻找，却久久没有发现她。</p><h3 id="770-04-09"><a href="#770-04-09" class="headerlink" title="770&#x2F;04&#x2F;09"></a>770&#x2F;04&#x2F;09</h3><p>Fuli清理失控者，她发现完全清除是不可能的，唯一的存活方法只有离开。</p><h2 id="Chapter-3：幽蓝边界"><a href="#Chapter-3：幽蓝边界" class="headerlink" title="Chapter 3：幽蓝边界"></a>Chapter 3：幽蓝边界</h2><h2 id="Chapter-4：管道迷宫"><a href="#Chapter-4：管道迷宫" class="headerlink" title="Chapter 4：管道迷宫"></a>Chapter 4：管道迷宫</h2><h3 id="770-05-21"><a href="#770-05-21" class="headerlink" title="770&#x2F;05&#x2F;21"></a>770&#x2F;05&#x2F;21</h3><p>进入迷宫管道时，鸠和Gino失联了。鸠通过撕开地上的一个皮球打开了新的道路，空间越来越亮，楼梯接连摊开摊平，像她手中的皮球一般。破碎翻开的皮面上，画着头尾相连的四层台阶，而她正站在凹凸起伏的山丘上，遥远地眺望着。山丘会移动，鸠望着地平线不断增加的嶙峋，停下了脚步，这样走下去没有任何意义。<br>鸠开始怀疑自己是否在现实，如果是在梦中，而她为什么又无法醒来。她向天空发问，话音刚落，场景变换，她回到了一开始的小房间。中间有一个单色屏街机，上面写着一行文字，让鸠输入自己在思念的人的名字，她输入了久住。机器显示回答正确，房间深处照射了一束光，久住在光下登场，她把鸠认成了自己的哥哥，鸠把收音机还给了她，并且约定与她在未来相见。<br>而就在此时，鸠明白了离开的方法。</p><h3 id="770-05-23"><a href="#770-05-23" class="headerlink" title="770&#x2F;05&#x2F;23"></a>770&#x2F;05&#x2F;23</h3><p>鸠在管道迷宫的第三天，和Gino一起吃完了最后的小饼干。</p><h3 id="770-06-01"><a href="#770-06-01" class="headerlink" title="770&#x2F;06&#x2F;01"></a>770&#x2F;06&#x2F;01</h3><p>鸠用迷宫贴纸装饰Alpa。</p><h3 id="770-06-04"><a href="#770-06-04" class="headerlink" title="770&#x2F;06&#x2F;04"></a>770&#x2F;06&#x2F;04</h3><p>摩托Trophon因为一直被放在第三区无人认领，被业余发明家布兰达改装。当Gino来认领的时候，布兰达以滞留时间过长没有站长许可和未缴纳滞留金为由不允许他带走，其实是怕他发现自己的改装，而且她也没想到真的有人会取摩托。</p><h2 id="Chapter-6：方舟蜃景"><a href="#Chapter-6：方舟蜃景" class="headerlink" title="Chapter 6：方舟蜃景"></a>Chapter 6：方舟蜃景</h2><h3 id="770-08-31"><a href="#770-08-31" class="headerlink" title="770&#x2F;08&#x2F;31"></a>770&#x2F;08&#x2F;31</h3><p>鸠重生，遇到Igallta，并跟随她前往重生登记处。</p><h3 id="770-09-27"><a href="#770-09-27" class="headerlink" title="770&#x2F;09&#x2F;27"></a>770&#x2F;09&#x2F;27</h3><p>Gino发现死去的左姓歌手。</p><h3 id="770-09-32"><a href="#770-09-32" class="headerlink" title="770&#x2F;09&#x2F;32"></a>770&#x2F;09&#x2F;32</h3><p>Gino在Pigeon Bar发现了一幅画，画中内容是一座倒悬的巨塔，酒吧的伍老板说这是酒保樱小姐所作。</p><h2 id="Chapter7：时钟链接"><a href="#Chapter7：时钟链接" class="headerlink" title="Chapter7：时钟链接"></a>Chapter7：时钟链接</h2><h3 id="771-08-31"><a href="#771-08-31" class="headerlink" title="771&#x2F;08&#x2F;31"></a>771&#x2F;08&#x2F;31</h3><p>鸠参加时钟城第93届梅花型ALIGN拉力赛。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少女，眼，与鼓励</title>
      <link href="/2023/07/30/Noel-and-Lumine-1/"/>
      <url>/2023/07/30/Noel-and-Lumine-1/</url>
      
        <content type="html"><![CDATA[<p>又是一天将尽，躺在床上，我的思绪仍在不断流动。这一段时间又去了不少地方，昨天才回到这个让我安心的小港湾里。房间不大但是很温馨，盆栽里的塞西莉亚花舒展着自己的洁白花瓣，史莱姆抱枕在我的身旁躺着……啊……真的好想一直呆在这里啊……<br>正胡思乱想时，耳边传来一个声音：<br>“那个……小荧……今晚我们能一起睡吗？……”<br>是诺艾尔。她穿着睡裙，站在门口，有点不知所措地看着我。自从我定居之后，诺艾尔就和我居住在一起。“和小荧在一起很安心”，诺艾尔是这样说的。她在白天的工作，仍然是帮助蒙德城的大家，当日暮之时，她也会卸去铠甲，在这里度过属于自己的放松时光。<br>“嗯，当然可以啦。”我回答诺艾尔。<br>“真的吗！小荧真好！”诺艾尔高兴地说着，没过多久，诺艾尔便和我一起，在这片小小天地里依偎着。<br>“那个……小荧……其实我有一件事……”诺艾尔的脸有点红，刚想要开口却欲言又止。<br>“嗯？诺艾尔是遇到什么麻烦了吗？”我轻轻地抱着她说。<br>“嗯……也不是麻烦啦。”诺艾尔把头埋在抱枕里蹭来蹭去，感觉更加害羞了。<br>“每当我帮助大家时，我会很开心，但是一想到有一些事情自己无法处理时，对方那种有点失落的眼神，呜……”诺艾尔把头靠在我的怀里，就像是一只做错事的小猫一样。<br>原来是这样啊。我苦笑了一下，轻轻地拿起了诺艾尔的神之眼。在家时，诺艾尔会把它作为吊坠戴在脖子上。“诶……？”<br>“来，诺艾尔，闭上眼睛，什么都不要想。”<br>我轻轻地汇聚起元素力，神之眼发出柔和的光芒。<br>“唔……好温暖……感觉好舒服……”诺艾尔闭着眼睛，喃喃自语着。<br>“诶嘿，诺艾尔知道‘共鸣’吗？我刚刚使用了一点岩元素的力量，诺艾尔也一定感受到了吧。”<br>“还有哦，我在神之眼上附着了元素标记。如果有一天诺艾尔遇到了困难，那么大喊一声‘小荧’，我能立马感知到，这样，诺艾尔就没有解决不了的问题啦。”<br>我轻抚着诺艾尔的银发，能够感觉到她的不安相比之前已经少了很多。<br>“真是的……小荧真会鼓励人呢。”诺艾尔说，不过这已不是之前的那种害羞，更多的是发自内心的松释和安心。<br>“好啦，快睡吧，不要想太多啦。”我轻轻地对她说。<br>“嗯……”<br>“对了，小荧……”<br>“你靠近一点……”<br>诶？我照着诺艾尔的话把头凑近，忽然，嘴唇被一团温热所包围。<br>“唔……”<br>我不由自主地闭上了眼睛。那团温热里像棉花糖一般软软的，想要永远地保存下来。我的内心也开始感觉到一团温暖，或许这就是诺艾尔对我的共鸣吧？<br>我被这团温热彻底降服，对诺艾尔的怀抱也不由自主地加紧了很多。我们的唇齿相贴，舌尖传来对方的温度与心跳，脑中已经是一片空白，空气中也只余下对方的气息，只想在这份心意里记下彼此，一起度过这段时光。<br>“小荧旅行这么长时间，一定很辛苦吧。这次，让我来关心小荧吧。我一直都在你的身边，如果你需要热牛奶和睡眠曲的话，我会立马去准备的。”<br>“嗯……”困意已经席卷上来，伴随着诺艾尔轻柔的歌声，我进入了梦乡：<br>“When I lost my way,<br>You’ve always been there to save my day.<br>Now I’m on the bed, take a little nap,<br>Dreaming like you don’t need to wake…”<br>“晚安哦。”</p>]]></content>
      
      
      <categories>
          
          <category> 随便写的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lineage OS for Redmi K50 编译指南</title>
      <link href="/2023/07/30/LineageOS-for-rubens/"/>
      <url>/2023/07/30/LineageOS-for-rubens/</url>
      
        <content type="html"><![CDATA[<h2 id="编译前的准备"><a href="#编译前的准备" class="headerlink" title="编译前的准备"></a>编译前的准备</h2><p>1.你的电脑最好有一颗强劲的CPU</p><blockquote><p>性能差一点也没关系，只是时间会长一点，这方面没有严格的要求。</p></blockquote><p>2.你的电脑需要16GB以上的运行内存</p><blockquote><p>如果你的电脑且运行内存为16GB，请最好通过未安装桌面环境的系统操作来提高编译成功率。<br>如果你的电脑运行着Windows，且运行内存为16GB，则不推荐通过安装虚拟机来进行编译操作。</p></blockquote><p>3.你的电脑需要350GB以上的硬盘空间</p><blockquote><p>如果你需要进行多次编译，则最好预留500GB以上的硬盘空间。</p></blockquote><p>4.你的电脑需要运行Ubuntu 20.04（wsl，虚拟机，直接运行的都可以）<br>5.你的电脑具有良好的网络环境<br>建议租一个云服务器，会更方便一些。<br>以下命令均需要在终端下运行。</p><h2 id="编译教程"><a href="#编译教程" class="headerlink" title="编译教程"></a>编译教程</h2><p>这里以编译Lineage OS 19.1为例：</p><h3 id="一、准备编译环境"><a href="#一、准备编译环境" class="headerlink" title="一、准备编译环境"></a>一、准备编译环境</h3><h4 id="1-更新软件源"><a href="#1-更新软件源" class="headerlink" title="1.更新软件源"></a>1.更新软件源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; apt-get upgrade -y</span><br></pre></td></tr></table></figure><h4 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2.安装依赖"></a>2.安装依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-gtk3-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev</span><br></pre></td></tr></table></figure><h4 id="3-设置git相关信息"><a href="#3-设置git相关信息" class="headerlink" title="3.设置git相关信息"></a>3.设置git相关信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;在此处替换成你的名字&quot;</span><br><span class="line">git config --global user.email &quot;在此处替换成你的邮箱&quot;</span><br></pre></td></tr></table></figure><h4 id="4-安装repo"><a href="#4-安装repo" class="headerlink" title="4.安装repo"></a>4.安装repo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.bin</span><br><span class="line">PATH=&quot;$&#123;HOME&#125;/.bin:$&#123;PATH&#125;&quot;</span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/.bin/repo</span><br><span class="line">chmod a+rx ~/.bin/repo</span><br></pre></td></tr></table></figure><h3 id="二、拉取相关代码"><a href="#二、拉取相关代码" class="headerlink" title="二、拉取相关代码"></a>二、拉取相关代码</h3><h4 id="1-创立工作区和工作文件夹"><a href="#1-创立工作区和工作文件夹" class="headerlink" title="1.创立工作区和工作文件夹"></a>1.创立工作区和工作文件夹</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen -S sync</span><br><span class="line">mkdir LineageOS &amp;&amp; cd LineageOS</span><br></pre></td></tr></table></figure><h4 id="2-拉取Lineage-OS源码"><a href="#2-拉取Lineage-OS源码" class="headerlink" title="2.拉取Lineage OS源码"></a>2.拉取Lineage OS源码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repo init -u https://github.com/LineageOS/android.git -b lineage-19.1</span><br><span class="line">repo sync</span><br></pre></td></tr></table></figure><blockquote><p>如果硬盘空间比较紧张，可以通过在第一行命令后加上 <code>--depth=1</code>来节省空间。<br>同时，在第一行命令输入完成后，你可以通过把镜像源换成清华镜像站来加快同步速度：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global url.https://mirrors.bfsu.edu.cn/git/AOSP/.insteadof https://android.googlesource.com</span><br></pre></td></tr></table></figure><blockquote></blockquote><h4 id="3-同步设备相关代码"><a href="#3-同步设备相关代码" class="headerlink" title="3.同步设备相关代码"></a>3.同步设备相关代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/wbs306/device_xiaomi_mt6895-common.git device/xiaomi/mt6895-common</span><br><span class="line">git clone -b lineage-19.1-oss https://github.com/YuKongA/device_xiaomi_rubens.git device/xiaomi/rubens</span><br><span class="line">git clone https://github.com/PixelExperience/device_mediatek_sepolicy_vndr device/mediatek/sepolicy_vndr</span><br><span class="line">git clone https://github.com/YuKongA/vendor_xiaomi_rubens.git vendor/xiaomi/rubens</span><br><span class="line">git clone https://github.com/wbs306/kernel_xiaomi_mt6895.git kernel/xiaomi/mt6895</span><br></pre></td></tr></table></figure><h4 id="4-修补相关补丁"><a href="#4-修补相关补丁" class="headerlink" title="4.修补相关补丁"></a>4.修补相关补丁</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ~/LineageOS/frameworks/opt/telephony</span><br><span class="line">git fetch https://gerrit.pixelexperience.org/frameworks_opt_telephony refs/changes/76/15476/1 &amp;&amp; git cherry-pick FETCH_HEAD</span><br><span class="line">cd ~/LineageOS/frameworks/opt/net/ims</span><br><span class="line">git fetch https://gerrit.pixelexperience.org/frameworks_opt_net_ims refs/changes/18/15318/1 &amp;&amp; git cherry-pick FETCH_HEAD</span><br><span class="line">git fetch https://gerrit.pixelexperience.org/frameworks_opt_net_ims refs/changes/17/15317/1 &amp;&amp; git cherry-pick FETCH_HEAD</span><br><span class="line">cd ~/LineageOS</span><br></pre></td></tr></table></figure><blockquote><p>如果你编译的是像Pixel Experience这些已经合并补丁的ROM，则不需要进行这一步。</p></blockquote><h4 id="5-修补必要的文件"><a href="#5-修补必要的文件" class="headerlink" title="5.修补必要的文件"></a>5.修补必要的文件</h4><p>从13.0.22的官方包里提取vendor.img，odm.img，然后把这两个文件上传到工作目录里的device&#x2F;xiaomi&#x2F;rubens&#x2F;prebuilts文件夹里。</p><h4 id="6-开始编译"><a href="#6-开始编译" class="headerlink" title="6.开始编译"></a>6.开始编译</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br><span class="line">lunch lineage_rubens-userdebug</span><br><span class="line">mka bacon</span><br></pre></td></tr></table></figure><p>此时按下Ctrl+A+D可以脱离工作区，你也可以随时通过<code>screen -R sync</code>来查看编译进度。<br>当编译完成时，在工作目录下的out&#x2F;target&#x2F;product&#x2F;rubens找到编译完成的包以及md5校验文件。可以通过TWRP来刷入刷机包。</p><blockquote><p>如果不进行第五步，可以通过以下命令只编译system分区与product分区：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br><span class="line">lunch lineage_rubens-userdebug</span><br><span class="line">mka systemimage &amp;&amp; mka productimage &amp;&amp; cd$OUT &amp;&amp; zip dsu.zip system.img product.img</span><br></pre></td></tr></table></figure><p>这样下来你会得到一个dsu.zip，里面有两个img文件，你可以通过DSU Sideloader来直接加载系统，也可以直接用fastboot刷入对应分区。</p><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5R课堂回答答案</title>
      <link href="/2023/07/30/P5R-Answer/"/>
      <url>/2023/07/30/P5R-Answer/</url>
      
        <content type="html"><![CDATA[<p>4月</p><p>12日</p><p>——坏人</p><p>19日</p><p>——两边一样长</p><p>23日</p><p>——全部</p><p>25日</p><p>——知道是错误还行动</p><p>——知道是正确而行动</p><p>27日</p><p>——四色定理</p><p>30日</p><p>——人物</p><p>——才能</p><p>——优秀的人</p><p>——————————</p><p>5月</p><p>7日</p><p>——命运之女</p><p>10日</p><p>——平安时代</p><p>11日（考试）</p><p>——源义经</p><p>——源赖朝</p><p>——源赖朝赢了</p><p>——弱者</p><p>12日（考试）</p><p>——认知</p><p>——两个都是</p><p>13日（考试）</p><p>——恶魔辞典</p><p>——致命女郎</p><p>16日</p><p>——安慰剂效应</p><p>19日</p><p>——葛饰北斋</p><p>21日</p><p>——1:1.414</p><p>23日</p><p>——一同</p><p>——感觉</p><p>——共感觉</p><p>26日</p><p>——柯南·道尔</p><p>31日</p><p>——约翰·席尔瓦</p><p>——————————</p><p>6月</p><p>4日</p><p>——晕轮效应</p><p>7日</p><p>——脚的数量</p><p>8日</p><p>——20世纪</p><p>13日</p><p>——绿色</p><p>15日</p><p>——硬币</p><p>20日</p><p>——智慧型手机</p><p>23日</p><p>——教皇</p><p>27日</p><p>——狗</p><p>29日</p><p>——金</p><p>——————————</p><p>7月</p><p>1日</p><p>——蛮头</p><p>4日</p><p>——尤利乌斯与奥古都斯</p><p>7日</p><p>——银河</p><p>——素面</p><p>9日</p><p>——三角形</p><p>11日</p><p>——长期记忆</p><p>——近于无限的量</p><p>——绝不会遗忘</p><p>12日</p><p>——偷窃</p><p>13日（考试）</p><p>——64度</p><p>——诸葛亮</p><p>——人头</p><p>——人头的替代品</p><p>14日（考试）</p><p>——勘察加拟石蟹·石蟹科</p><p>——经济混乱</p><p>15日（考试）</p><p>——下猫下狗</p><p>——鬼的肠子</p><p>——————————</p><p>9月</p><p>3日</p><p>——繁荣</p><p>6日</p><p>——停表错觉</p><p>14日</p><p>——租赁店</p><p>17日</p><p>——有能力的老鹰都会藏起自己的爪子</p><p>21日</p><p>——正中间</p><p>24日</p><p>——白色20片，黑色12片</p><p>28日</p><p>——Phantom</p><p>——Vibration</p><p>——Syndrome</p><p>29日</p><p>——宫内厅</p><p>——————————</p><p>10月</p><p>3日</p><p>——星星</p><p>6日</p><p>——约瑟夫·吉约丹</p><p>11日</p><p>——波巴</p><p>17日（考试）</p><p>——32面</p><p>——以前只有一种颜色</p><p>——黑白的</p><p>18日（考试）</p><p>——夏尔·亨利·桑松</p><p>——因为是世袭制</p><p>19日（考试）</p><p>——强制劳动</p><p>——3只蜜蜂在欧洲大陆</p><p>22日</p><p>——15</p><p>24日</p><p>——主观认定</p><p>——————————</p><p>11月</p><p>2日</p><p>——江户时代</p><p>4日</p><p>——剑</p><p>8日</p><p>——几岁都可以</p><p>10日</p><p>——因为很难看到它的眼睛</p><p>12日</p><p>——因为声音是合成的</p><p>14日</p><p>——因为海拔很高</p><p>15日</p><p>——斩首示众</p><p>18日</p><p>——蜗牛线</p><p>————————————</p><p>12月</p><p>20日（考试）</p><p>——D</p><p>——10亿以上</p><p>——斩首并游街示众</p><p>——是一场表演</p><p>21日（考试）</p><p>——红桃</p><p>——旁听</p><p>22日（考试）</p><p>——日本</p><p>——英国的无畏舰</p><p>——————————</p><p>1月</p><p>11日</p><p>——八百万</p><p>14日</p><p>——岩手县</p><p>18日</p><p>——准备就绪</p><p>21日</p><p>——蛇</p><p>25日</p><p>——我的手机</p><p>——用光</p><p>——我的手机没电了</p><p>27日</p><p>——可以传给朋友的朋友的朋友</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你，和你们</title>
      <link href="/2023/07/30/You-and-You/"/>
      <url>/2023/07/30/You-and-You/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>谢谢Caetrix姐姐的修改，跑圈！</strong></p><p>　　早上6:00。<br>　　当许多人还沉浸在睡梦之中时，你已经醒来。你知道，这是你的责任所在。<br>　　你是医院的一名医护人员，在新冠肺炎病毒爆发之时，当整个城市都陷入了沉寂，人们将房门紧闭之际，你和大家，却勇敢地前往了与病毒抗争的一线。在这里，已经坚守了二十多天。<br>　　你一边洗脸刷牙，一边想着家里的情况。工作的忙碌，与时间的赛跑，每天下班时的万分疲劳，让你甚至没法用微信和自己的丈夫和孩子聊一会天，问问家里老人的情况，不知道他们现在是否安好？你的心中冒出一丝忧虑。<br>　　早上7:00。<br>　　你从恍惚中反应过来，拍了拍自己的脸，想着：“别想别的，目前最重要的是面对疫情。”你很清楚，自己的身份和职责，你始终无法忘记，开始从事医护工作时的庄严宣誓“救死扶伤，不辞艰辛”，国家和人民将希望寄托给了自己，你知道，这份厚重的希冀，不可辜负。<br>　　吃完早饭，换上厚重的防护服，和奋斗一夜的战士们换班。“你们加油啊。”你听见这样的声音，来自战友的嘱托，让你变得更加清醒，充满了勇气，“会的。”你在心里默默想着。<br>　　消毒，送早餐，消毒，为了防止感染，这样的工作每天你都要进行。虽然说有一点点烦琐，但是你还是坚持做下来了。自从来到这里，你感觉似乎成长了，变得有了耐心，有了强烈的使命感。<br>　　上午9:00。<br>　　你来到病房，为这里的病人们量体温，做记录。大家早就起来，等着你给他们做检查。他们笑着对你说说“医生辛苦了”，详细地告诉你他们的状况和感受。你穿着厚厚的防护服，虽然闷得喘不过气来，口罩把脸勒得生疼，但当你听见来自病人们的感谢，看到他们的微笑，心中更坚定了让大家恢复健康的信念。你笑着为大家做完了该做的事情。<br>　　在你的工作中，也碰到了一些脾气不太好的隔离患者，你并没有一点生气或埋怨，细心地问他们需要些什么，慢慢地安抚他们，让他们平静下来。<br>　　当初来这里时，你记得自己还是怨声载道的，但是现在，和原来已经不一样了。不是似乎，是真的长大了，心里想到这些，居然有一点愉悦的感觉。<br>　　 下午2:30。<br>　　是一天的培训时间。你们每天都要接触这些传染病的病人，为了更好更有效的救治病人，记忆和训练这些知识技能是非常有必要的。你认真地听着老师所说的话，把他说的要点都详尽记到心里面，同事们也都在仔细地聆听，你们都知道，这是不允许出错的。<br>　　晚上7:26。<br>　　你和大家刚刚分发完病人的晚餐，这时候你突然接到通知，一位患者出现突发症状，情况紧急，不容迟缓，需要你们尽快集合前去救治。<br>　　你和大伙连忙准备，前去帮助。<br>　　救护车上的是一位中年大叔，他现在正在躺在病床上困难地呼吸着，脸色苍白你和大家跑着，把病人送到重症监护病房。患者的生命体征非常微弱。你按照指导和经验，赶忙接好了呼吸机，测量病人地体温和心率。<br>　　网上会诊的专家也连线成功了，病房内的气氛非常凝重，大家都在忙碌着，生怕出了一点什么错误。<br>　　手术刀，剪刀，你一样一样地递过去。专家组一致认为需要手术进行治疗。你只感觉到汗珠在往下流，眼前的面罩早已蒙上了一层雾。会好起来的，你心里这样想着，立即投入了与时间的赛跑之中。<br>　　凌晨1:43。<br>　　你做完消毒工作，回到临时宿舍，你躺在床上，打算休息了。<br>　　经过你们的奋战，患者已经有所好转，虽然没有完全脱离生命危险，但是情况在可控的范围之内，你的心中浮出成就感，但马上提醒自己“不可懈怠”。<br>　　你不由得想起来自己二十多天的经历。有的时候，可能正需要我们，来维护大家的健康生活。当初来到这里，只是为了应付工作的需要，但是现在越来越重视这份工作的重要性。一定能好起来的，我会努力的。你这样想着。<br>　　怀着对明天的信念和希望，你沉沉睡去，夜班的护士们接着你们的路，继续前行。</p>]]></content>
      
      
      <categories>
          
          <category> 随便写的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《月姬 -A piece of blue glass moon-》通关感想</title>
      <link href="/2023/07/30/About-Tsukihime/"/>
      <url>/2023/07/30/About-Tsukihime/</url>
      
        <content type="html"><![CDATA[<p><del>在开始这个话题之前，我想先和各位讨论一下爱尔奎特为什么是神。<br>首先是犯下傲慢之罪的秋叶。作为远野家的继任家主……</del></p><p>咳咳，跑题了。<br>本来是不知道《月姬》这个系列的，可能是2016年刚玩b站的时候接触过一点点fgo，所以在第一次听到的时候感觉有一点熟悉。在我某位好兄弟的强烈推荐下，我利用放寒假的时间，推完了《月姬》的重制版本。<del>借此我也打开了Switch模拟器的新大门</del><br>我是在除夕夜推完的，在这前一天我主动要求我这位好兄弟给我剧透月姬的世界观<del>结果光是听他的梗概我就已经破大防了</del>。推完全作后，听着片尾曲《Lost》，心里有一种说不出来的难受感，这还是我被剧透，知道接下来会发生什么之后。<br>我觉得第一个最应该拿出来说的是《月姬》对于人物的塑造。当你去认真了解这部作品里的角色后，你再去看这些人物的时候，和你的第一感觉是完完全全不一样的。有些角色你表面看着会特别可爱，但是当你去深究她的这种性格从何而来时，迎接你的就是当头一棒。就用公主线的主角爱尔奎特来说，你第一次玩就会感觉，爱尔奎特就是一个什么都不懂的，傻到可爱的吸血鬼。她能轻易原谅将自己残忍杀害的陌生人，又在和对方合作后就在对方面前倒头大睡。而在确认了对志贵的心意之后，她也毫不掩饰自己的爱意，<del>甚至直接到对方家上床</del>当你开始想，为什么爱尔奎特会是这样的时候，一刀直接把你砍到精神恍惚，只被灌输战斗技巧，又被欺骗吸血，八百年间孤身一人沉睡……现在再去看爱尔奎特和志贵的爱情故事，是不是又会有特别不同的感受呢？其他人也是这样，秋叶刚强的外表下，还是一个对哥哥非常爱慕，想要对哥哥撒娇的小孩子，琥珀的笑容下，是她长期遭受性虐对的情感麻木，翡翠看似是无口少女，但小时候也是一个活泼的孩子。这样两极反转的表里性格，也使得月姬里每一个人的不幸更加刻骨铭心，<del>也能让你看完难受一个月</del>。<br>第二个就是月姬的演出和文案。和大部分的galgame的对话框形式不同，月姬的文本是全屏一行行显示的，带来的沉浸感更为强烈，也更有那种“读故事”的样子。战斗画面的特效我不知道怎么去详细评价，反正很牛逼就对了。在这里我特别要提最能体现这一点的两个地方，第一个是志贵杀害爱尔奎特的这一段，文本直接改变了字体和部分颜色用来表示志贵扭曲的心理活动，甚至把十七刀的下手位置都写得清清楚楚，到后面制作组更是恶趣味把十七分割的惨烈场景来了个CG，把这个重要剧情的阴间程度渲染到了极致。第二个是志贵被爱尔奎特追赶的剧情，最后志贵发现自己杀人<del>或许将杀鬼更为贴切</del>不是假的，以为自己也要被爱尔奎特杀害时，他大笑起来，此处CV的表现堪称绝杀，把志贵的崩溃，自暴自弃全部渲染了出来。<br>当然，月姬公主线里也有一个让我特别不爽的地方，就是志贵完全忽略掉了秋叶的感受，三番五次地偷偷溜出去和爱尔奎特见面，最终之战时也是这样，在了解到秋叶的故事后，我对剧情这样安排极其不爽，虽然是爱尔奎特的主场，我觉得也应该充分考虑秋叶的感受，秋叶是对志贵很严格，但是她对志贵也是非常关心的，可是志贵在这条线里，就完全没有去了解过秋叶，再怎么说对方也是你的妹妹呀，也不难解释为什么在ed9里秋叶就直接把志贵关起来了。<br>月姬是第一部真正能把我刀到如此难受的galgame，前期的强烈代入感让我很难不去玩后面的剧情，而后面的各种黑深残让我体验到了奈须蘑菇的文字魅力。说不上来为什么只有月姬让我这么难受，也许这也是游戏的魅力所在吧。</p><blockquote><p>我希望<br>那三个小小的身影仍能在一起快乐地玩耍<br>两位红发少女也能无忧无虑地成长<br>在纯洁的花海中，吸血鬼少女均匀地呼吸着<br>我也希望<br>名为志贵的少年，缓缓地牵起名为爱尔奎特的少女的手<br>名为秋叶的少女，紧紧拥抱她朝思暮想的哥哥<br>名为琥珀和翡翠的少女，能接受秋叶和志贵，露出真正的笑容<br>可我知道，从故事一开始，这一切就注定是梦了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
